
test_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004418  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004524  08004524  00005524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004550  08004550  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004550  08004550  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004550  08004550  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004550  08004550  00005550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004554  08004554  00005554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004558  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  2000000c  08004564  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08004564  00006124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b348  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2f  00000000  00000000  0001137d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00012eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0d  00000000  00000000  00013b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001762b  00000000  00000000  00014585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8f1  00000000  00000000  0002bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089edf  00000000  00000000  0003a4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4380  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036d4  00000000  00000000  000c43c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c7a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800450c 	.word	0x0800450c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800450c 	.word	0x0800450c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_f2iz>:
 8000368:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800036c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000370:	d30f      	bcc.n	8000392 <__aeabi_f2iz+0x2a>
 8000372:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000376:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800037a:	d90d      	bls.n	8000398 <__aeabi_f2iz+0x30>
 800037c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000380:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000384:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000388:	fa23 f002 	lsr.w	r0, r3, r2
 800038c:	bf18      	it	ne
 800038e:	4240      	negne	r0, r0
 8000390:	4770      	bx	lr
 8000392:	f04f 0000 	mov.w	r0, #0
 8000396:	4770      	bx	lr
 8000398:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800039c:	d101      	bne.n	80003a2 <__aeabi_f2iz+0x3a>
 800039e:	0242      	lsls	r2, r0, #9
 80003a0:	d105      	bne.n	80003ae <__aeabi_f2iz+0x46>
 80003a2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80003a6:	bf08      	it	eq
 80003a8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80003ac:	4770      	bx	lr
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	4770      	bx	lr

080003b4 <__aeabi_f2uiz>:
 80003b4:	0042      	lsls	r2, r0, #1
 80003b6:	d20e      	bcs.n	80003d6 <__aeabi_f2uiz+0x22>
 80003b8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80003bc:	d30b      	bcc.n	80003d6 <__aeabi_f2uiz+0x22>
 80003be:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80003c2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80003c6:	d409      	bmi.n	80003dc <__aeabi_f2uiz+0x28>
 80003c8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80003cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80003d0:	fa23 f002 	lsr.w	r0, r3, r2
 80003d4:	4770      	bx	lr
 80003d6:	f04f 0000 	mov.w	r0, #0
 80003da:	4770      	bx	lr
 80003dc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80003e0:	d101      	bne.n	80003e6 <__aeabi_f2uiz+0x32>
 80003e2:	0242      	lsls	r2, r0, #9
 80003e4:	d102      	bne.n	80003ec <__aeabi_f2uiz+0x38>
 80003e6:	f04f 30ff 	mov.w	r0, #4294967295
 80003ea:	4770      	bx	lr
 80003ec:	f04f 0000 	mov.w	r0, #0
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop

080003f4 <Motor_Drive>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Motor_Drive(int16_t speedMotor){
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	4603      	mov	r3, r0
 80003fc:	80fb      	strh	r3, [r7, #6]
	int pwm = abs(speedMotor);
 80003fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000402:	2b00      	cmp	r3, #0
 8000404:	bfb8      	it	lt
 8000406:	425b      	neglt	r3, r3
 8000408:	b29b      	uxth	r3, r3
 800040a:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800040c:	4b0e      	ldr	r3, [pc, #56]	@ (8000448 <Motor_Drive+0x54>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	2200      	movs	r2, #0
 8000412:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8000414:	4b0c      	ldr	r3, [pc, #48]	@ (8000448 <Motor_Drive+0x54>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2200      	movs	r2, #0
 800041a:	639a      	str	r2, [r3, #56]	@ 0x38

	if(speedMotor < 0)			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm);
 800041c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000420:	2b00      	cmp	r3, #0
 8000422:	da04      	bge.n	800042e <Motor_Drive+0x3a>
 8000424:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <Motor_Drive+0x54>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	68fa      	ldr	r2, [r7, #12]
 800042a:	639a      	str	r2, [r3, #56]	@ 0x38
	else if(speedMotor > 0)		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm);
}
 800042c:	e007      	b.n	800043e <Motor_Drive+0x4a>
	else if(speedMotor > 0)		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm);
 800042e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000432:	2b00      	cmp	r3, #0
 8000434:	dd03      	ble.n	800043e <Motor_Drive+0x4a>
 8000436:	4b04      	ldr	r3, [pc, #16]	@ (8000448 <Motor_Drive+0x54>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	68fa      	ldr	r2, [r7, #12]
 800043c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800043e:	bf00      	nop
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	2000007c 	.word	0x2000007c

0800044c <SetValueParam>:

void SetValueParam(uint8_t value, uint8_t reg) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	4603      	mov	r3, r0
 8000454:	460a      	mov	r2, r1
 8000456:	71fb      	strb	r3, [r7, #7]
 8000458:	4613      	mov	r3, r2
 800045a:	71bb      	strb	r3, [r7, #6]
	switch (reg) {
 800045c:	79bb      	ldrb	r3, [r7, #6]
 800045e:	2b07      	cmp	r3, #7
 8000460:	d002      	beq.n	8000468 <SetValueParam+0x1c>
 8000462:	2b08      	cmp	r3, #8
 8000464:	d008      	beq.n	8000478 <SetValueParam+0x2c>
	case DEV_REG_TARGET_ANGLE:
		ecd = 0;
		target_angle = value;
		break;
	}
}
 8000466:	e013      	b.n	8000490 <SetValueParam+0x44>
		target_speed = value;
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ff24 	bl	80002b8 <__aeabi_ui2f>
 8000470:	4603      	mov	r3, r0
 8000472:	4a09      	ldr	r2, [pc, #36]	@ (8000498 <SetValueParam+0x4c>)
 8000474:	6013      	str	r3, [r2, #0]
		break;
 8000476:	e00b      	b.n	8000490 <SetValueParam+0x44>
		ecd = 0;
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <SetValueParam+0x50>)
 800047a:	f04f 0200 	mov.w	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
		target_angle = value;
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	4618      	mov	r0, r3
 8000484:	f7ff ff18 	bl	80002b8 <__aeabi_ui2f>
 8000488:	4603      	mov	r3, r0
 800048a:	4a05      	ldr	r2, [pc, #20]	@ (80004a0 <SetValueParam+0x54>)
 800048c:	6013      	str	r3, [r2, #0]
		break;
 800048e:	bf00      	nop
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20000110 	.word	0x20000110
 800049c:	2000010c 	.word	0x2000010c
 80004a0:	20000114 	.word	0x20000114

080004a4 <GetValueParam>:

uint8_t GetValueParam(uint8_t reg) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
	switch (reg) {
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	2b07      	cmp	r3, #7
 80004b2:	d002      	beq.n	80004ba <GetValueParam+0x16>
 80004b4:	2b08      	cmp	r3, #8
 80004b6:	d008      	beq.n	80004ca <GetValueParam+0x26>
 80004b8:	e00f      	b.n	80004da <GetValueParam+0x36>
	case DEV_REG_TARGET_SPEED:
		return target_speed;
 80004ba:	4b0a      	ldr	r3, [pc, #40]	@ (80004e4 <GetValueParam+0x40>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ff78 	bl	80003b4 <__aeabi_f2uiz>
 80004c4:	4603      	mov	r3, r0
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	e008      	b.n	80004dc <GetValueParam+0x38>
		break;
	case DEV_REG_TARGET_ANGLE:
		return target_angle;
 80004ca:	4b07      	ldr	r3, [pc, #28]	@ (80004e8 <GetValueParam+0x44>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
 80004d0:	f7ff ff70 	bl	80003b4 <__aeabi_f2uiz>
 80004d4:	4603      	mov	r3, r0
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	e000      	b.n	80004dc <GetValueParam+0x38>
		break;
	}
	return 0;
 80004da:	2300      	movs	r3, #0
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000110 	.word	0x20000110
 80004e8:	20000114 	.word	0x20000114

080004ec <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f001 f91f 	bl	8001738 <HAL_I2C_EnableListen_IT>
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
 8000510:	4613      	mov	r3, r2
 8000512:	803b      	strh	r3, [r7, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT)  // if the master wants to transmit the data
 8000514:	78fb      	ldrb	r3, [r7, #3]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d106      	bne.n	8000528 <HAL_I2C_AddrCallback+0x24>
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, rxBuffer, 2, I2C_FIRST_AND_LAST_FRAME);
 800051a:	2308      	movs	r3, #8
 800051c:	2202      	movs	r2, #2
 800051e:	490a      	ldr	r1, [pc, #40]	@ (8000548 <HAL_I2C_AddrCallback+0x44>)
 8000520:	6878      	ldr	r0, [r7, #4]
 8000522:	f001 f897 	bl	8001654 <HAL_I2C_Slave_Seq_Receive_IT>
 8000526:	e008      	b.n	800053a <HAL_I2C_AddrCallback+0x36>
	else if (TransferDirection == I2C_DIRECTION_RECEIVE)
 8000528:	78fb      	ldrb	r3, [r7, #3]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d105      	bne.n	800053a <HAL_I2C_AddrCallback+0x36>
		HAL_I2C_Slave_Seq_Receive_IT(hi2c, rxBuffer, 1, I2C_FIRST_AND_LAST_FRAME);
 800052e:	2308      	movs	r3, #8
 8000530:	2201      	movs	r2, #1
 8000532:	4905      	ldr	r1, [pc, #20]	@ (8000548 <HAL_I2C_AddrCallback+0x44>)
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f001 f88d 	bl	8001654 <HAL_I2C_Slave_Seq_Receive_IT>
	_TransferDirection = TransferDirection;
 800053a:	4a04      	ldr	r2, [pc, #16]	@ (800054c <HAL_I2C_AddrCallback+0x48>)
 800053c:	78fb      	ldrb	r3, [r7, #3]
 800053e:	7013      	strb	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000118 	.word	0x20000118
 800054c:	2000011d 	.word	0x2000011d

08000550 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	if (_TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8000558:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d110      	bne.n	8000582 <HAL_I2C_SlaveRxCpltCallback+0x32>
		uint8_t reg = rxBuffer[0];
 8000560:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	73fb      	strb	r3, [r7, #15]
		uint8_t value = rxBuffer[1];
 8000566:	4b0a      	ldr	r3, [pc, #40]	@ (8000590 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 8000568:	785b      	ldrb	r3, [r3, #1]
 800056a:	73bb      	strb	r3, [r7, #14]
		SetValueParam(value, reg);
 800056c:	7bfa      	ldrb	r2, [r7, #15]
 800056e:	7bbb      	ldrb	r3, [r7, #14]
 8000570:	4611      	mov	r1, r2
 8000572:	4618      	mov	r0, r3
 8000574:	f7ff ff6a 	bl	800044c <SetValueParam>
		memset(rxBuffer, 0, sizeof(rxBuffer));
 8000578:	2205      	movs	r2, #5
 800057a:	2100      	movs	r1, #0
 800057c:	4804      	ldr	r0, [pc, #16]	@ (8000590 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 800057e:	f003 ff99 	bl	80044b4 <memset>
	}
}
 8000582:	bf00      	nop
 8000584:	3710      	adds	r7, #16
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	2000011d 	.word	0x2000011d
 8000590:	20000118 	.word	0x20000118

08000594 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(hi2c);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f001 f8cb 	bl	8001738 <HAL_I2C_EnableListen_IT>
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == ECD_A_Pin){
 80005b6:	88fb      	ldrh	r3, [r7, #6]
 80005b8:	2b40      	cmp	r3, #64	@ 0x40
 80005ba:	d11d      	bne.n	80005f8 <HAL_GPIO_EXTI_Callback+0x4c>
		if(HAL_GPIO_ReadPin(ECD_B_GPIO_Port, ECD_B_Pin))	ecd++;
 80005bc:	2180      	movs	r1, #128	@ 0x80
 80005be:	4810      	ldr	r0, [pc, #64]	@ (8000600 <HAL_GPIO_EXTI_Callback+0x54>)
 80005c0:	f000 fec0 	bl	8001344 <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d00b      	beq.n	80005e2 <HAL_GPIO_EXTI_Callback+0x36>
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <HAL_GPIO_EXTI_Callback+0x58>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fdc0 	bl	8000158 <__addsf3>
 80005d8:	4603      	mov	r3, r0
 80005da:	461a      	mov	r2, r3
 80005dc:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <HAL_GPIO_EXTI_Callback+0x58>)
 80005de:	601a      	str	r2, [r3, #0]
		else												ecd--;
	}
}
 80005e0:	e00a      	b.n	80005f8 <HAL_GPIO_EXTI_Callback+0x4c>
		else												ecd--;
 80005e2:	4b08      	ldr	r3, [pc, #32]	@ (8000604 <HAL_GPIO_EXTI_Callback+0x58>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fdb2 	bl	8000154 <__aeabi_fsub>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b03      	ldr	r3, [pc, #12]	@ (8000604 <HAL_GPIO_EXTI_Callback+0x58>)
 80005f6:	601a      	str	r2, [r3, #0]
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40010800 	.word	0x40010800
 8000604:	2000010c 	.word	0x2000010c

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fb20 	bl	8000c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f840 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 f976 	bl	8000904 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000618:	f000 f878 	bl	800070c <MX_I2C1_Init>
  MX_TIM2_Init();
 800061c:	f000 f8a4 	bl	8000768 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000620:	f000 f922 	bl	8000868 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000624:	2100      	movs	r1, #0
 8000626:	4817      	ldr	r0, [pc, #92]	@ (8000684 <main+0x7c>)
 8000628:	f003 fa0a 	bl	8003a40 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 800062c:	2104      	movs	r1, #4
 800062e:	4815      	ldr	r0, [pc, #84]	@ (8000684 <main+0x7c>)
 8000630:	f003 fa06 	bl	8003a40 <HAL_TIM_PWM_Start>
  while (HAL_I2C_EnableListen_IT(&hi2c1) != HAL_OK);
 8000634:	bf00      	nop
 8000636:	4814      	ldr	r0, [pc, #80]	@ (8000688 <main+0x80>)
 8000638:	f001 f87e 	bl	8001738 <HAL_I2C_EnableListen_IT>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d1f9      	bne.n	8000636 <main+0x2e>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  target_speed = GetValueParam(DEV_REG_TARGET_SPEED);
 8000642:	2007      	movs	r0, #7
 8000644:	f7ff ff2e 	bl	80004a4 <GetValueParam>
 8000648:	4603      	mov	r3, r0
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff fe34 	bl	80002b8 <__aeabi_ui2f>
 8000650:	4603      	mov	r3, r0
 8000652:	4a0e      	ldr	r2, [pc, #56]	@ (800068c <main+0x84>)
 8000654:	6013      	str	r3, [r2, #0]
	  target_angle = GetValueParam(DEV_REG_TARGET_ANGLE);
 8000656:	2008      	movs	r0, #8
 8000658:	f7ff ff24 	bl	80004a4 <GetValueParam>
 800065c:	4603      	mov	r3, r0
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fe2a 	bl	80002b8 <__aeabi_ui2f>
 8000664:	4603      	mov	r3, r0
 8000666:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <main+0x88>)
 8000668:	6013      	str	r3, [r2, #0]
//		target_speed = (target_angle - ecd*360/count_PerRevol) * 10;
//		if (target_speed < 0) {
//			target_speed = 0;
//		}
//	  }
	  Motor_Drive(target_speed);
 800066a:	4b08      	ldr	r3, [pc, #32]	@ (800068c <main+0x84>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff fe7a 	bl	8000368 <__aeabi_f2iz>
 8000674:	4603      	mov	r3, r0
 8000676:	b21b      	sxth	r3, r3
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff febb 	bl	80003f4 <Motor_Drive>
	  target_speed = GetValueParam(DEV_REG_TARGET_SPEED);
 800067e:	bf00      	nop
 8000680:	e7df      	b.n	8000642 <main+0x3a>
 8000682:	bf00      	nop
 8000684:	2000007c 	.word	0x2000007c
 8000688:	20000028 	.word	0x20000028
 800068c:	20000110 	.word	0x20000110
 8000690:	20000114 	.word	0x20000114

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b090      	sub	sp, #64	@ 0x40
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0318 	add.w	r3, r7, #24
 800069e:	2228      	movs	r2, #40	@ 0x28
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 ff06 	bl	80044b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ba:	2301      	movs	r3, #1
 80006bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006be:	2310      	movs	r3, #16
 80006c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	4618      	mov	r0, r3
 80006cc:	f002 fd14 	bl	80030f8 <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006d6:	f000 f961 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 ff82 	bl	80035fc <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006fe:	f000 f94d 	bl	800099c <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3740      	adds	r7, #64	@ 0x40
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_I2C1_Init+0x50>)
 8000712:	4a13      	ldr	r2, [pc, #76]	@ (8000760 <MX_I2C1_Init+0x54>)
 8000714:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_I2C1_Init+0x50>)
 8000718:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <MX_I2C1_Init+0x58>)
 800071a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 46;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_I2C1_Init+0x50>)
 8000724:	222e      	movs	r2, #46	@ 0x2e
 8000726:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_I2C1_Init+0x50>)
 800072a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800072e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b0a      	ldr	r3, [pc, #40]	@ (800075c <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000736:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800073c:	4b07      	ldr	r3, [pc, #28]	@ (800075c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000742:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_I2C1_Init+0x50>)
 800074a:	f000 fe2b 	bl	80013a4 <HAL_I2C_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000754:	f000 f922 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000028 	.word	0x20000028
 8000760:	40005400 	.word	0x40005400
 8000764:	00061a80 	.word	0x00061a80

08000768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08e      	sub	sp, #56	@ 0x38
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000798:	4b32      	ldr	r3, [pc, #200]	@ (8000864 <MX_TIM2_Init+0xfc>)
 800079a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800079e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80007a0:	4b30      	ldr	r3, [pc, #192]	@ (8000864 <MX_TIM2_Init+0xfc>)
 80007a2:	2207      	movs	r2, #7
 80007a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000864 <MX_TIM2_Init+0xfc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80007ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000864 <MX_TIM2_Init+0xfc>)
 80007ae:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000864 <MX_TIM2_Init+0xfc>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ba:	4b2a      	ldr	r3, [pc, #168]	@ (8000864 <MX_TIM2_Init+0xfc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007c0:	4828      	ldr	r0, [pc, #160]	@ (8000864 <MX_TIM2_Init+0xfc>)
 80007c2:	f003 f895 	bl	80038f0 <HAL_TIM_Base_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007cc:	f000 f8e6 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007da:	4619      	mov	r1, r3
 80007dc:	4821      	ldr	r0, [pc, #132]	@ (8000864 <MX_TIM2_Init+0xfc>)
 80007de:	f003 fa93 	bl	8003d08 <HAL_TIM_ConfigClockSource>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007e8:	f000 f8d8 	bl	800099c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007ec:	481d      	ldr	r0, [pc, #116]	@ (8000864 <MX_TIM2_Init+0xfc>)
 80007ee:	f003 f8ce 	bl	800398e <HAL_TIM_PWM_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007f8:	f000 f8d0 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fc:	2300      	movs	r3, #0
 80007fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000804:	f107 0320 	add.w	r3, r7, #32
 8000808:	4619      	mov	r1, r3
 800080a:	4816      	ldr	r0, [pc, #88]	@ (8000864 <MX_TIM2_Init+0xfc>)
 800080c:	f003 fdf4 	bl	80043f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000816:	f000 f8c1 	bl	800099c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800081a:	2360      	movs	r3, #96	@ 0x60
 800081c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2200      	movs	r2, #0
 800082e:	4619      	mov	r1, r3
 8000830:	480c      	ldr	r0, [pc, #48]	@ (8000864 <MX_TIM2_Init+0xfc>)
 8000832:	f003 f9a7 	bl	8003b84 <HAL_TIM_PWM_ConfigChannel>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800083c:	f000 f8ae 	bl	800099c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2204      	movs	r2, #4
 8000844:	4619      	mov	r1, r3
 8000846:	4807      	ldr	r0, [pc, #28]	@ (8000864 <MX_TIM2_Init+0xfc>)
 8000848:	f003 f99c 	bl	8003b84 <HAL_TIM_PWM_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000852:	f000 f8a3 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000856:	4803      	ldr	r0, [pc, #12]	@ (8000864 <MX_TIM2_Init+0xfc>)
 8000858:	f000 f956 	bl	8000b08 <HAL_TIM_MspPostInit>

}
 800085c:	bf00      	nop
 800085e:	3738      	adds	r7, #56	@ 0x38
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000007c 	.word	0x2000007c

08000868 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086e:	f107 0308 	add.w	r3, r7, #8
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000884:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <MX_TIM4_Init+0x94>)
 8000886:	4a1e      	ldr	r2, [pc, #120]	@ (8000900 <MX_TIM4_Init+0x98>)
 8000888:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800088a:	4b1c      	ldr	r3, [pc, #112]	@ (80008fc <MX_TIM4_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b1a      	ldr	r3, [pc, #104]	@ (80008fc <MX_TIM4_Init+0x94>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000896:	4b19      	ldr	r3, [pc, #100]	@ (80008fc <MX_TIM4_Init+0x94>)
 8000898:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800089c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <MX_TIM4_Init+0x94>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	@ (80008fc <MX_TIM4_Init+0x94>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008aa:	4814      	ldr	r0, [pc, #80]	@ (80008fc <MX_TIM4_Init+0x94>)
 80008ac:	f003 f820 	bl	80038f0 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 f871 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008be:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	@ (80008fc <MX_TIM4_Init+0x94>)
 80008c8:	f003 fa1e 	bl	8003d08 <HAL_TIM_ConfigClockSource>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f000 f863 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	@ (80008fc <MX_TIM4_Init+0x94>)
 80008e4:	f003 fd88 	bl	80043f8 <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80008ee:	f000 f855 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000c4 	.word	0x200000c4
 8000900:	40000800 	.word	0x40000800

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_GPIO_Init+0x8c>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a1c      	ldr	r2, [pc, #112]	@ (8000990 <MX_GPIO_Init+0x8c>)
 800091e:	f043 0304 	orr.w	r3, r3, #4
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_GPIO_Init+0x8c>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0304 	and.w	r3, r3, #4
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_GPIO_Init+0x8c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a16      	ldr	r2, [pc, #88]	@ (8000990 <MX_GPIO_Init+0x8c>)
 8000936:	f043 0308 	orr.w	r3, r3, #8
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_GPIO_Init+0x8c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0308 	and.w	r3, r3, #8
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : ECD_A_Pin */
  GPIO_InitStruct.Pin = ECD_A_Pin;
 8000948:	2340      	movs	r3, #64	@ 0x40
 800094a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_GPIO_Init+0x90>)
 800094e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ECD_A_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	4619      	mov	r1, r3
 800095a:	480f      	ldr	r0, [pc, #60]	@ (8000998 <MX_GPIO_Init+0x94>)
 800095c:	f000 fb6e 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : ECD_B_Pin */
  GPIO_InitStruct.Pin = ECD_B_Pin;
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(ECD_B_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	4619      	mov	r1, r3
 8000972:	4809      	ldr	r0, [pc, #36]	@ (8000998 <MX_GPIO_Init+0x94>)
 8000974:	f000 fb62 	bl	800103c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2100      	movs	r1, #0
 800097c:	2017      	movs	r0, #23
 800097e:	f000 faa0 	bl	8000ec2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000982:	2017      	movs	r0, #23
 8000984:	f000 fab9 	bl	8000efa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40021000 	.word	0x40021000
 8000994:	10110000 	.word	0x10110000
 8000998:	40010800 	.word	0x40010800

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ae:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <HAL_MspInit+0x5c>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	4a14      	ldr	r2, [pc, #80]	@ (8000a04 <HAL_MspInit+0x5c>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6193      	str	r3, [r2, #24]
 80009ba:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <HAL_MspInit+0x5c>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <HAL_MspInit+0x5c>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000a04 <HAL_MspInit+0x5c>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <HAL_MspInit+0x5c>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009de:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <HAL_MspInit+0x60>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4a04      	ldr	r2, [pc, #16]	@ (8000a08 <HAL_MspInit+0x60>)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010000 	.word	0x40010000

08000a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a1d      	ldr	r2, [pc, #116]	@ (8000a9c <HAL_I2C_MspInit+0x90>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d133      	bne.n	8000a94 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <HAL_I2C_MspInit+0x94>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa0 <HAL_I2C_MspInit+0x94>)
 8000a32:	f043 0308 	orr.w	r3, r3, #8
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <HAL_I2C_MspInit+0x94>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0308 	and.w	r3, r3, #8
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a44:	23c0      	movs	r3, #192	@ 0xc0
 8000a46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a48:	2312      	movs	r3, #18
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	4813      	ldr	r0, [pc, #76]	@ (8000aa4 <HAL_I2C_MspInit+0x98>)
 8000a58:	f000 faf0 	bl	800103c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a5c:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <HAL_I2C_MspInit+0x94>)
 8000a5e:	69db      	ldr	r3, [r3, #28]
 8000a60:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa0 <HAL_I2C_MspInit+0x94>)
 8000a62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a66:	61d3      	str	r3, [r2, #28]
 8000a68:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <HAL_I2C_MspInit+0x94>)
 8000a6a:	69db      	ldr	r3, [r3, #28]
 8000a6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2100      	movs	r1, #0
 8000a78:	201f      	movs	r0, #31
 8000a7a:	f000 fa22 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a7e:	201f      	movs	r0, #31
 8000a80:	f000 fa3b 	bl	8000efa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	2020      	movs	r0, #32
 8000a8a:	f000 fa1a 	bl	8000ec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a8e:	2020      	movs	r0, #32
 8000a90:	f000 fa33 	bl	8000efa <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010c00 	.word	0x40010c00

08000aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ab8:	d10c      	bne.n	8000ad4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <HAL_TIM_Base_MspInit+0x58>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	4a10      	ldr	r2, [pc, #64]	@ (8000b00 <HAL_TIM_Base_MspInit+0x58>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	61d3      	str	r3, [r2, #28]
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <HAL_TIM_Base_MspInit+0x58>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ad2:	e010      	b.n	8000af6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <HAL_TIM_Base_MspInit+0x5c>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d10b      	bne.n	8000af6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <HAL_TIM_Base_MspInit+0x58>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <HAL_TIM_Base_MspInit+0x58>)
 8000ae4:	f043 0304 	orr.w	r3, r3, #4
 8000ae8:	61d3      	str	r3, [r2, #28]
 8000aea:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <HAL_TIM_Base_MspInit+0x58>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	f003 0304 	and.w	r3, r3, #4
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
}
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40000800 	.word	0x40000800

08000b08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b088      	sub	sp, #32
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b26:	d117      	bne.n	8000b58 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <HAL_TIM_MspPostInit+0x58>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b60 <HAL_TIM_MspPostInit+0x58>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <HAL_TIM_MspPostInit+0x58>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b40:	2303      	movs	r3, #3
 8000b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <HAL_TIM_MspPostInit+0x5c>)
 8000b54:	f000 fa72 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	3720      	adds	r7, #32
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40010800 	.word	0x40010800

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <NMI_Handler+0x4>

08000b70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <MemManage_Handler+0x4>

08000b80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb8:	f000 f890 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ECD_A_Pin);
 8000bc4:	2040      	movs	r0, #64	@ 0x40
 8000bc6:	f000 fbd5 	bl	8001374 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000bd4:	4802      	ldr	r0, [pc, #8]	@ (8000be0 <I2C1_EV_IRQHandler+0x10>)
 8000bd6:	f000 fde4 	bl	80017a2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000028 	.word	0x20000028

08000be4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000be8:	4802      	ldr	r0, [pc, #8]	@ (8000bf4 <I2C1_ER_IRQHandler+0x10>)
 8000bea:	f000 ff2d 	bl	8001a48 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000028 	.word	0x20000028

08000bf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c04:	f7ff fff8 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c08:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c0a:	490c      	ldr	r1, [pc, #48]	@ (8000c3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a09      	ldr	r2, [pc, #36]	@ (8000c44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c20:	4c09      	ldr	r4, [pc, #36]	@ (8000c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f003 fc49 	bl	80044c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c32:	f7ff fce9 	bl	8000608 <main>
  bx lr
 8000c36:	4770      	bx	lr
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c40:	08004558 	.word	0x08004558
  ldr r2, =_sbss
 8000c44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c48:	20000124 	.word	0x20000124

08000c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC1_2_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <HAL_Init+0x28>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <HAL_Init+0x28>)
 8000c5a:	f043 0310 	orr.w	r3, r3, #16
 8000c5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 f923 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	200f      	movs	r0, #15
 8000c68:	f000 f808 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fe9c 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40022000 	.word	0x40022000

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f93b 	bl	8000f16 <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f903 	bl	8000ec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	@ (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <HAL_IncTick+0x1c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a03      	ldr	r2, [pc, #12]	@ (8000cfc <HAL_IncTick+0x20>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000120 	.word	0x20000120

08000d00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return uwTick;
 8000d04:	4b02      	ldr	r3, [pc, #8]	@ (8000d10 <HAL_GetTick+0x10>)
 8000d06:	681b      	ldr	r3, [r3, #0]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	20000120 	.word	0x20000120

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	@ (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	@ (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4906      	ldr	r1, [pc, #24]	@ (8000dac <__NVIC_EnableIRQ+0x34>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	@ (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	@ (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	@ 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	@ 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e78:	d301      	bcc.n	8000e7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00f      	b.n	8000e9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e86:	210f      	movs	r1, #15
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f7ff ff90 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e96:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <SysTick_Config+0x40>)
 8000e98:	2207      	movs	r2, #7
 8000e9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	e000e010 	.word	0xe000e010

08000eac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff2d 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	607a      	str	r2, [r7, #4]
 8000ece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed4:	f7ff ff42 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ed8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	6978      	ldr	r0, [r7, #20]
 8000ee0:	f7ff ff90 	bl	8000e04 <NVIC_EncodePriority>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff5f 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff ff35 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ffa2 	bl	8000e68 <SysTick_Config>
 8000f24:	4603      	mov	r3, r0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d005      	beq.n	8000f54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	73fb      	strb	r3, [r7, #15]
 8000f52:	e051      	b.n	8000ff8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 020e 	bic.w	r2, r2, #14
 8000f62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0201 	bic.w	r2, r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a22      	ldr	r2, [pc, #136]	@ (8001004 <HAL_DMA_Abort_IT+0xd4>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d029      	beq.n	8000fd2 <HAL_DMA_Abort_IT+0xa2>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a21      	ldr	r2, [pc, #132]	@ (8001008 <HAL_DMA_Abort_IT+0xd8>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d022      	beq.n	8000fce <HAL_DMA_Abort_IT+0x9e>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800100c <HAL_DMA_Abort_IT+0xdc>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d01a      	beq.n	8000fc8 <HAL_DMA_Abort_IT+0x98>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1e      	ldr	r2, [pc, #120]	@ (8001010 <HAL_DMA_Abort_IT+0xe0>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d012      	beq.n	8000fc2 <HAL_DMA_Abort_IT+0x92>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8001014 <HAL_DMA_Abort_IT+0xe4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00a      	beq.n	8000fbc <HAL_DMA_Abort_IT+0x8c>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a1b      	ldr	r2, [pc, #108]	@ (8001018 <HAL_DMA_Abort_IT+0xe8>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d102      	bne.n	8000fb6 <HAL_DMA_Abort_IT+0x86>
 8000fb0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000fb4:	e00e      	b.n	8000fd4 <HAL_DMA_Abort_IT+0xa4>
 8000fb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000fba:	e00b      	b.n	8000fd4 <HAL_DMA_Abort_IT+0xa4>
 8000fbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc0:	e008      	b.n	8000fd4 <HAL_DMA_Abort_IT+0xa4>
 8000fc2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc6:	e005      	b.n	8000fd4 <HAL_DMA_Abort_IT+0xa4>
 8000fc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fcc:	e002      	b.n	8000fd4 <HAL_DMA_Abort_IT+0xa4>
 8000fce:	2310      	movs	r3, #16
 8000fd0:	e000      	b.n	8000fd4 <HAL_DMA_Abort_IT+0xa4>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	4a11      	ldr	r2, [pc, #68]	@ (800101c <HAL_DMA_Abort_IT+0xec>)
 8000fd6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	4798      	blx	r3
    } 
  }
  return status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40020008 	.word	0x40020008
 8001008:	4002001c 	.word	0x4002001c
 800100c:	40020030 	.word	0x40020030
 8001010:	40020044 	.word	0x40020044
 8001014:	40020058 	.word	0x40020058
 8001018:	4002006c 	.word	0x4002006c
 800101c:	40020000 	.word	0x40020000

08001020 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800102e:	b2db      	uxtb	r3, r3
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
	...

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b08b      	sub	sp, #44	@ 0x2c
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104e:	e169      	b.n	8001324 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001050:	2201      	movs	r2, #1
 8001052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	429a      	cmp	r2, r3
 800106a:	f040 8158 	bne.w	800131e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4a9a      	ldr	r2, [pc, #616]	@ (80012dc <HAL_GPIO_Init+0x2a0>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d05e      	beq.n	8001136 <HAL_GPIO_Init+0xfa>
 8001078:	4a98      	ldr	r2, [pc, #608]	@ (80012dc <HAL_GPIO_Init+0x2a0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d875      	bhi.n	800116a <HAL_GPIO_Init+0x12e>
 800107e:	4a98      	ldr	r2, [pc, #608]	@ (80012e0 <HAL_GPIO_Init+0x2a4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d058      	beq.n	8001136 <HAL_GPIO_Init+0xfa>
 8001084:	4a96      	ldr	r2, [pc, #600]	@ (80012e0 <HAL_GPIO_Init+0x2a4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d86f      	bhi.n	800116a <HAL_GPIO_Init+0x12e>
 800108a:	4a96      	ldr	r2, [pc, #600]	@ (80012e4 <HAL_GPIO_Init+0x2a8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d052      	beq.n	8001136 <HAL_GPIO_Init+0xfa>
 8001090:	4a94      	ldr	r2, [pc, #592]	@ (80012e4 <HAL_GPIO_Init+0x2a8>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d869      	bhi.n	800116a <HAL_GPIO_Init+0x12e>
 8001096:	4a94      	ldr	r2, [pc, #592]	@ (80012e8 <HAL_GPIO_Init+0x2ac>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d04c      	beq.n	8001136 <HAL_GPIO_Init+0xfa>
 800109c:	4a92      	ldr	r2, [pc, #584]	@ (80012e8 <HAL_GPIO_Init+0x2ac>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d863      	bhi.n	800116a <HAL_GPIO_Init+0x12e>
 80010a2:	4a92      	ldr	r2, [pc, #584]	@ (80012ec <HAL_GPIO_Init+0x2b0>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d046      	beq.n	8001136 <HAL_GPIO_Init+0xfa>
 80010a8:	4a90      	ldr	r2, [pc, #576]	@ (80012ec <HAL_GPIO_Init+0x2b0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d85d      	bhi.n	800116a <HAL_GPIO_Init+0x12e>
 80010ae:	2b12      	cmp	r3, #18
 80010b0:	d82a      	bhi.n	8001108 <HAL_GPIO_Init+0xcc>
 80010b2:	2b12      	cmp	r3, #18
 80010b4:	d859      	bhi.n	800116a <HAL_GPIO_Init+0x12e>
 80010b6:	a201      	add	r2, pc, #4	@ (adr r2, 80010bc <HAL_GPIO_Init+0x80>)
 80010b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010bc:	08001137 	.word	0x08001137
 80010c0:	08001111 	.word	0x08001111
 80010c4:	08001123 	.word	0x08001123
 80010c8:	08001165 	.word	0x08001165
 80010cc:	0800116b 	.word	0x0800116b
 80010d0:	0800116b 	.word	0x0800116b
 80010d4:	0800116b 	.word	0x0800116b
 80010d8:	0800116b 	.word	0x0800116b
 80010dc:	0800116b 	.word	0x0800116b
 80010e0:	0800116b 	.word	0x0800116b
 80010e4:	0800116b 	.word	0x0800116b
 80010e8:	0800116b 	.word	0x0800116b
 80010ec:	0800116b 	.word	0x0800116b
 80010f0:	0800116b 	.word	0x0800116b
 80010f4:	0800116b 	.word	0x0800116b
 80010f8:	0800116b 	.word	0x0800116b
 80010fc:	0800116b 	.word	0x0800116b
 8001100:	08001119 	.word	0x08001119
 8001104:	0800112d 	.word	0x0800112d
 8001108:	4a79      	ldr	r2, [pc, #484]	@ (80012f0 <HAL_GPIO_Init+0x2b4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d013      	beq.n	8001136 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800110e:	e02c      	b.n	800116a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	623b      	str	r3, [r7, #32]
          break;
 8001116:	e029      	b.n	800116c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	3304      	adds	r3, #4
 800111e:	623b      	str	r3, [r7, #32]
          break;
 8001120:	e024      	b.n	800116c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	3308      	adds	r3, #8
 8001128:	623b      	str	r3, [r7, #32]
          break;
 800112a:	e01f      	b.n	800116c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	330c      	adds	r3, #12
 8001132:	623b      	str	r3, [r7, #32]
          break;
 8001134:	e01a      	b.n	800116c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800113e:	2304      	movs	r3, #4
 8001140:	623b      	str	r3, [r7, #32]
          break;
 8001142:	e013      	b.n	800116c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d105      	bne.n	8001158 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800114c:	2308      	movs	r3, #8
 800114e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	69fa      	ldr	r2, [r7, #28]
 8001154:	611a      	str	r2, [r3, #16]
          break;
 8001156:	e009      	b.n	800116c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001158:	2308      	movs	r3, #8
 800115a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	615a      	str	r2, [r3, #20]
          break;
 8001162:	e003      	b.n	800116c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
          break;
 8001168:	e000      	b.n	800116c <HAL_GPIO_Init+0x130>
          break;
 800116a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	2bff      	cmp	r3, #255	@ 0xff
 8001170:	d801      	bhi.n	8001176 <HAL_GPIO_Init+0x13a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	e001      	b.n	800117a <HAL_GPIO_Init+0x13e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3304      	adds	r3, #4
 800117a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	2bff      	cmp	r3, #255	@ 0xff
 8001180:	d802      	bhi.n	8001188 <HAL_GPIO_Init+0x14c>
 8001182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	e002      	b.n	800118e <HAL_GPIO_Init+0x152>
 8001188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118a:	3b08      	subs	r3, #8
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	210f      	movs	r1, #15
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	401a      	ands	r2, r3
 80011a0:	6a39      	ldr	r1, [r7, #32]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	431a      	orrs	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 80b1 	beq.w	800131e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011bc:	4b4d      	ldr	r3, [pc, #308]	@ (80012f4 <HAL_GPIO_Init+0x2b8>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	4a4c      	ldr	r2, [pc, #304]	@ (80012f4 <HAL_GPIO_Init+0x2b8>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6193      	str	r3, [r2, #24]
 80011c8:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <HAL_GPIO_Init+0x2b8>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011d4:	4a48      	ldr	r2, [pc, #288]	@ (80012f8 <HAL_GPIO_Init+0x2bc>)
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	089b      	lsrs	r3, r3, #2
 80011da:	3302      	adds	r3, #2
 80011dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	220f      	movs	r2, #15
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	4013      	ands	r3, r2
 80011f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a40      	ldr	r2, [pc, #256]	@ (80012fc <HAL_GPIO_Init+0x2c0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d013      	beq.n	8001228 <HAL_GPIO_Init+0x1ec>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a3f      	ldr	r2, [pc, #252]	@ (8001300 <HAL_GPIO_Init+0x2c4>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d00d      	beq.n	8001224 <HAL_GPIO_Init+0x1e8>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a3e      	ldr	r2, [pc, #248]	@ (8001304 <HAL_GPIO_Init+0x2c8>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d007      	beq.n	8001220 <HAL_GPIO_Init+0x1e4>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a3d      	ldr	r2, [pc, #244]	@ (8001308 <HAL_GPIO_Init+0x2cc>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d101      	bne.n	800121c <HAL_GPIO_Init+0x1e0>
 8001218:	2303      	movs	r3, #3
 800121a:	e006      	b.n	800122a <HAL_GPIO_Init+0x1ee>
 800121c:	2304      	movs	r3, #4
 800121e:	e004      	b.n	800122a <HAL_GPIO_Init+0x1ee>
 8001220:	2302      	movs	r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x1ee>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <HAL_GPIO_Init+0x1ee>
 8001228:	2300      	movs	r3, #0
 800122a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800122c:	f002 0203 	and.w	r2, r2, #3
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	4093      	lsls	r3, r2
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800123a:	492f      	ldr	r1, [pc, #188]	@ (80012f8 <HAL_GPIO_Init+0x2bc>)
 800123c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d006      	beq.n	8001262 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001254:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	492c      	ldr	r1, [pc, #176]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	608b      	str	r3, [r1, #8]
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001262:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	43db      	mvns	r3, r3
 800126a:	4928      	ldr	r1, [pc, #160]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 800126c:	4013      	ands	r3, r2
 800126e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d006      	beq.n	800128a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800127c:	4b23      	ldr	r3, [pc, #140]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 800127e:	68da      	ldr	r2, [r3, #12]
 8001280:	4922      	ldr	r1, [pc, #136]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	60cb      	str	r3, [r1, #12]
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800128a:	4b20      	ldr	r3, [pc, #128]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 800128c:	68da      	ldr	r2, [r3, #12]
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	43db      	mvns	r3, r3
 8001292:	491e      	ldr	r1, [pc, #120]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 8001294:	4013      	ands	r3, r2
 8001296:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012a4:	4b19      	ldr	r3, [pc, #100]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	4918      	ldr	r1, [pc, #96]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012b2:	4b16      	ldr	r3, [pc, #88]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4914      	ldr	r1, [pc, #80]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 80012bc:	4013      	ands	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d021      	beq.n	8001310 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	490e      	ldr	r1, [pc, #56]	@ (800130c <HAL_GPIO_Init+0x2d0>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]
 80012d8:	e021      	b.n	800131e <HAL_GPIO_Init+0x2e2>
 80012da:	bf00      	nop
 80012dc:	10320000 	.word	0x10320000
 80012e0:	10310000 	.word	0x10310000
 80012e4:	10220000 	.word	0x10220000
 80012e8:	10210000 	.word	0x10210000
 80012ec:	10120000 	.word	0x10120000
 80012f0:	10110000 	.word	0x10110000
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010000 	.word	0x40010000
 80012fc:	40010800 	.word	0x40010800
 8001300:	40010c00 	.word	0x40010c00
 8001304:	40011000 	.word	0x40011000
 8001308:	40011400 	.word	0x40011400
 800130c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <HAL_GPIO_Init+0x304>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	43db      	mvns	r3, r3
 8001318:	4909      	ldr	r1, [pc, #36]	@ (8001340 <HAL_GPIO_Init+0x304>)
 800131a:	4013      	ands	r3, r2
 800131c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800131e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001320:	3301      	adds	r3, #1
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132a:	fa22 f303 	lsr.w	r3, r2, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	f47f ae8e 	bne.w	8001050 <HAL_GPIO_Init+0x14>
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	372c      	adds	r7, #44	@ 0x2c
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	40010400 	.word	0x40010400

08001344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	4013      	ands	r3, r2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e001      	b.n	8001366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
	...

08001374 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001380:	695a      	ldr	r2, [r3, #20]
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	4013      	ands	r3, r2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800138a:	4a05      	ldr	r2, [pc, #20]	@ (80013a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f90a 	bl	80005ac <HAL_GPIO_EXTI_Callback>
  }
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40010400 	.word	0x40010400

080013a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e12b      	b.n	800160e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d106      	bne.n	80013d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fb1e 	bl	8000a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2224      	movs	r2, #36	@ 0x24
 80013d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0201 	bic.w	r2, r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80013f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001406:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001408:	f002 fa40 	bl	800388c <HAL_RCC_GetPCLK1Freq>
 800140c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	4a81      	ldr	r2, [pc, #516]	@ (8001618 <HAL_I2C_Init+0x274>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d807      	bhi.n	8001428 <HAL_I2C_Init+0x84>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4a80      	ldr	r2, [pc, #512]	@ (800161c <HAL_I2C_Init+0x278>)
 800141c:	4293      	cmp	r3, r2
 800141e:	bf94      	ite	ls
 8001420:	2301      	movls	r3, #1
 8001422:	2300      	movhi	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	e006      	b.n	8001436 <HAL_I2C_Init+0x92>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4a7d      	ldr	r2, [pc, #500]	@ (8001620 <HAL_I2C_Init+0x27c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	bf94      	ite	ls
 8001430:	2301      	movls	r3, #1
 8001432:	2300      	movhi	r3, #0
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e0e7      	b.n	800160e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4a78      	ldr	r2, [pc, #480]	@ (8001624 <HAL_I2C_Init+0x280>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	0c9b      	lsrs	r3, r3, #18
 8001448:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	430a      	orrs	r2, r1
 800145c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a6a      	ldr	r2, [pc, #424]	@ (8001618 <HAL_I2C_Init+0x274>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d802      	bhi.n	8001478 <HAL_I2C_Init+0xd4>
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	3301      	adds	r3, #1
 8001476:	e009      	b.n	800148c <HAL_I2C_Init+0xe8>
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	4a69      	ldr	r2, [pc, #420]	@ (8001628 <HAL_I2C_Init+0x284>)
 8001484:	fba2 2303 	umull	r2, r3, r2, r3
 8001488:	099b      	lsrs	r3, r3, #6
 800148a:	3301      	adds	r3, #1
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	6812      	ldr	r2, [r2, #0]
 8001490:	430b      	orrs	r3, r1
 8001492:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800149e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	495c      	ldr	r1, [pc, #368]	@ (8001618 <HAL_I2C_Init+0x274>)
 80014a8:	428b      	cmp	r3, r1
 80014aa:	d819      	bhi.n	80014e0 <HAL_I2C_Init+0x13c>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1e59      	subs	r1, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ba:	1c59      	adds	r1, r3, #1
 80014bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014c0:	400b      	ands	r3, r1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00a      	beq.n	80014dc <HAL_I2C_Init+0x138>
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1e59      	subs	r1, r3, #1
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d4:	3301      	adds	r3, #1
 80014d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014da:	e051      	b.n	8001580 <HAL_I2C_Init+0x1dc>
 80014dc:	2304      	movs	r3, #4
 80014de:	e04f      	b.n	8001580 <HAL_I2C_Init+0x1dc>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d111      	bne.n	800150c <HAL_I2C_Init+0x168>
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	1e58      	subs	r0, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	440b      	add	r3, r1
 80014f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014fa:	3301      	adds	r3, #1
 80014fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001500:	2b00      	cmp	r3, #0
 8001502:	bf0c      	ite	eq
 8001504:	2301      	moveq	r3, #1
 8001506:	2300      	movne	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	e012      	b.n	8001532 <HAL_I2C_Init+0x18e>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1e58      	subs	r0, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	0099      	lsls	r1, r3, #2
 800151c:	440b      	add	r3, r1
 800151e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001522:	3301      	adds	r3, #1
 8001524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf0c      	ite	eq
 800152c:	2301      	moveq	r3, #1
 800152e:	2300      	movne	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_I2C_Init+0x196>
 8001536:	2301      	movs	r3, #1
 8001538:	e022      	b.n	8001580 <HAL_I2C_Init+0x1dc>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10e      	bne.n	8001560 <HAL_I2C_Init+0x1bc>
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1e58      	subs	r0, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6859      	ldr	r1, [r3, #4]
 800154a:	460b      	mov	r3, r1
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	440b      	add	r3, r1
 8001550:	fbb0 f3f3 	udiv	r3, r0, r3
 8001554:	3301      	adds	r3, #1
 8001556:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800155e:	e00f      	b.n	8001580 <HAL_I2C_Init+0x1dc>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1e58      	subs	r0, r3, #1
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6859      	ldr	r1, [r3, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	0099      	lsls	r1, r3, #2
 8001570:	440b      	add	r3, r1
 8001572:	fbb0 f3f3 	udiv	r3, r0, r3
 8001576:	3301      	adds	r3, #1
 8001578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	6809      	ldr	r1, [r1, #0]
 8001584:	4313      	orrs	r3, r2
 8001586:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69da      	ldr	r2, [r3, #28]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6911      	ldr	r1, [r2, #16]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68d2      	ldr	r2, [r2, #12]
 80015ba:	4311      	orrs	r1, r2
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	430b      	orrs	r3, r1
 80015c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695a      	ldr	r2, [r3, #20]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2220      	movs	r2, #32
 80015fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	000186a0 	.word	0x000186a0
 800161c:	001e847f 	.word	0x001e847f
 8001620:	003d08ff 	.word	0x003d08ff
 8001624:	431bde83 	.word	0x431bde83
 8001628:	10624dd3 	.word	0x10624dd3

0800162c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163e:	2b80      	cmp	r3, #128	@ 0x80
 8001640:	d103      	bne.n	800164a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001670:	2b28      	cmp	r3, #40	@ 0x28
 8001672:	d15b      	bne.n	800172c <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e054      	b.n	800172e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800168e:	2302      	movs	r3, #2
 8001690:	e04d      	b.n	800172e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2201      	movs	r2, #1
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d007      	beq.n	80016b8 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	222a      	movs	r2, #42	@ 0x2a
 80016cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2220      	movs	r2, #32
 80016d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	88fa      	ldrh	r2, [r7, #6]
 80016e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001726:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	e000      	b.n	800172e <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800172c:	2302      	movs	r3, #2
  }
}
 800172e:	4618      	mov	r0, r3
 8001730:	371c      	adds	r7, #28
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b20      	cmp	r3, #32
 800174a:	d124      	bne.n	8001796 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2228      	movs	r2, #40	@ 0x28
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b01      	cmp	r3, #1
 8001760:	d007      	beq.n	8001772 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f042 0201 	orr.w	r2, r2, #1
 8001770:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001780:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8001790:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001796:	2302      	movs	r3, #2
  }
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b088      	sub	sp, #32
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ba:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80017c2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017ca:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d003      	beq.n	80017da <HAL_I2C_EV_IRQHandler+0x38>
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	2b40      	cmp	r3, #64	@ 0x40
 80017d6:	f040 80b1 	bne.w	800193c <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10d      	bne.n	8001810 <HAL_I2C_EV_IRQHandler+0x6e>
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80017fa:	d003      	beq.n	8001804 <HAL_I2C_EV_IRQHandler+0x62>
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001802:	d101      	bne.n	8001808 <HAL_I2C_EV_IRQHandler+0x66>
 8001804:	2301      	movs	r3, #1
 8001806:	e000      	b.n	800180a <HAL_I2C_EV_IRQHandler+0x68>
 8001808:	2300      	movs	r3, #0
 800180a:	2b01      	cmp	r3, #1
 800180c:	f000 8114 	beq.w	8001a38 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00b      	beq.n	8001832 <HAL_I2C_EV_IRQHandler+0x90>
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f001 fc4d 	bl	80030c4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fd4c 	bl	80022c8 <I2C_Master_SB>
 8001830:	e083      	b.n	800193a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HAL_I2C_EV_IRQHandler+0xac>
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f000 fdc3 	bl	80023d2 <I2C_Master_ADD10>
 800184c:	e075      	b.n	800193a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d008      	beq.n	800186a <HAL_I2C_EV_IRQHandler+0xc8>
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fdde 	bl	8002424 <I2C_Master_ADDR>
 8001868:	e067      	b.n	800193a <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d036      	beq.n	80018e2 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800187e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001882:	f000 80db 	beq.w	8001a3c <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00d      	beq.n	80018ac <HAL_I2C_EV_IRQHandler+0x10a>
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001896:	2b00      	cmp	r3, #0
 8001898:	d008      	beq.n	80018ac <HAL_I2C_EV_IRQHandler+0x10a>
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d103      	bne.n	80018ac <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 f9ac 	bl	8001c02 <I2C_MasterTransmit_TXE>
 80018aa:	e046      	b.n	800193a <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0304 	and.w	r3, r3, #4
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 80c2 	beq.w	8001a3c <HAL_I2C_EV_IRQHandler+0x29a>
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 80bc 	beq.w	8001a3c <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80018c4:	7bbb      	ldrb	r3, [r7, #14]
 80018c6:	2b21      	cmp	r3, #33	@ 0x21
 80018c8:	d103      	bne.n	80018d2 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 fa35 	bl	8001d3a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018d0:	e0b4      	b.n	8001a3c <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80018d2:	7bfb      	ldrb	r3, [r7, #15]
 80018d4:	2b40      	cmp	r3, #64	@ 0x40
 80018d6:	f040 80b1 	bne.w	8001a3c <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 faa3 	bl	8001e26 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018e0:	e0ac      	b.n	8001a3c <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018f0:	f000 80a4 	beq.w	8001a3c <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00d      	beq.n	800191a <HAL_I2C_EV_IRQHandler+0x178>
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001904:	2b00      	cmp	r3, #0
 8001906:	d008      	beq.n	800191a <HAL_I2C_EV_IRQHandler+0x178>
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	d103      	bne.n	800191a <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 fb1f 	bl	8001f56 <I2C_MasterReceive_RXNE>
 8001918:	e00f      	b.n	800193a <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 808b 	beq.w	8001a3c <HAL_I2C_EV_IRQHandler+0x29a>
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 8085 	beq.w	8001a3c <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 fbd7 	bl	80020e6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001938:	e080      	b.n	8001a3c <HAL_I2C_EV_IRQHandler+0x29a>
 800193a:	e07f      	b.n	8001a3c <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	61fb      	str	r3, [r7, #28]
 800194c:	e007      	b.n	800195e <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d011      	beq.n	800198c <HAL_I2C_EV_IRQHandler+0x1ea>
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00c      	beq.n	800198c <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001982:	69b9      	ldr	r1, [r7, #24]
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f000 ffa4 	bl	80028d2 <I2C_Slave_ADDR>
 800198a:	e05a      	b.n	8001a42 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <HAL_I2C_EV_IRQHandler+0x206>
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 ffdf 	bl	8002964 <I2C_Slave_STOPF>
 80019a6:	e04c      	b.n	8001a42 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
 80019aa:	2b21      	cmp	r3, #33	@ 0x21
 80019ac:	d002      	beq.n	80019b4 <HAL_I2C_EV_IRQHandler+0x212>
 80019ae:	7bbb      	ldrb	r3, [r7, #14]
 80019b0:	2b29      	cmp	r3, #41	@ 0x29
 80019b2:	d120      	bne.n	80019f6 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00d      	beq.n	80019da <HAL_I2C_EV_IRQHandler+0x238>
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_I2C_EV_IRQHandler+0x238>
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d103      	bne.n	80019da <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 fec1 	bl	800275a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019d8:	e032      	b.n	8001a40 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d02d      	beq.n	8001a40 <HAL_I2C_EV_IRQHandler+0x29e>
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d028      	beq.n	8001a40 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fef0 	bl	80027d4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019f4:	e024      	b.n	8001a40 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00d      	beq.n	8001a1c <HAL_I2C_EV_IRQHandler+0x27a>
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d008      	beq.n	8001a1c <HAL_I2C_EV_IRQHandler+0x27a>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d103      	bne.n	8001a1c <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fefd 	bl	8002814 <I2C_SlaveReceive_RXNE>
 8001a1a:	e012      	b.n	8001a42 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00d      	beq.n	8001a42 <HAL_I2C_EV_IRQHandler+0x2a0>
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d008      	beq.n	8001a42 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 ff2d 	bl	8002890 <I2C_SlaveReceive_BTF>
 8001a36:	e004      	b.n	8001a42 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8001a38:	bf00      	nop
 8001a3a:	e002      	b.n	8001a42 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a3c:	bf00      	nop
 8001a3e:	e000      	b.n	8001a42 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a40:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	@ 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001a6a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d015      	beq.n	8001aa2 <HAL_I2C_ER_IRQHandler+0x5a>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d010      	beq.n	8001aa2 <HAL_I2C_ER_IRQHandler+0x5a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001a90:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001aa0:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_I2C_ER_IRQHandler+0x80>
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001ac6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d03e      	beq.n	8001b50 <HAL_I2C_ER_IRQHandler+0x108>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d039      	beq.n	8001b50 <HAL_I2C_ER_IRQHandler+0x108>
  {
    tmp1 = CurrentMode;
 8001adc:	7efb      	ldrb	r3, [r7, #27]
 8001ade:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001aee:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af4:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001af6:	7ebb      	ldrb	r3, [r7, #26]
 8001af8:	2b20      	cmp	r3, #32
 8001afa:	d112      	bne.n	8001b22 <HAL_I2C_ER_IRQHandler+0xda>
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10f      	bne.n	8001b22 <HAL_I2C_ER_IRQHandler+0xda>
 8001b02:	7cfb      	ldrb	r3, [r7, #19]
 8001b04:	2b21      	cmp	r3, #33	@ 0x21
 8001b06:	d008      	beq.n	8001b1a <HAL_I2C_ER_IRQHandler+0xd2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001b08:	7cfb      	ldrb	r3, [r7, #19]
 8001b0a:	2b29      	cmp	r3, #41	@ 0x29
 8001b0c:	d005      	beq.n	8001b1a <HAL_I2C_ER_IRQHandler+0xd2>
 8001b0e:	7cfb      	ldrb	r3, [r7, #19]
 8001b10:	2b28      	cmp	r3, #40	@ 0x28
 8001b12:	d106      	bne.n	8001b22 <HAL_I2C_ER_IRQHandler+0xda>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2b21      	cmp	r3, #33	@ 0x21
 8001b18:	d103      	bne.n	8001b22 <HAL_I2C_ER_IRQHandler+0xda>
    {
      I2C_Slave_AF(hi2c);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f001 f852 	bl	8002bc4 <I2C_Slave_AF>
 8001b20:	e016      	b.n	8001b50 <HAL_I2C_ER_IRQHandler+0x108>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b2a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b34:	7efb      	ldrb	r3, [r7, #27]
 8001b36:	2b10      	cmp	r3, #16
 8001b38:	d002      	beq.n	8001b40 <HAL_I2C_ER_IRQHandler+0xf8>
 8001b3a:	7efb      	ldrb	r3, [r7, #27]
 8001b3c:	2b40      	cmp	r3, #64	@ 0x40
 8001b3e:	d107      	bne.n	8001b50 <HAL_I2C_ER_IRQHandler+0x108>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b4e:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00d      	beq.n	8001b76 <HAL_I2C_ER_IRQHandler+0x12e>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	f043 0308 	orr.w	r3, r3, #8
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8001b74:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f001 f88f 	bl	8002cac <I2C_ITError>
  }
}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	@ 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr

08001bba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr

08001bde <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr

08001c02 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c10:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c18:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c1e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d150      	bne.n	8001cca <I2C_MasterTransmit_TXE+0xc8>
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
 8001c2a:	2b21      	cmp	r3, #33	@ 0x21
 8001c2c:	d14d      	bne.n	8001cca <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d01d      	beq.n	8001c70 <I2C_MasterTransmit_TXE+0x6e>
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b20      	cmp	r3, #32
 8001c38:	d01a      	beq.n	8001c70 <I2C_MasterTransmit_TXE+0x6e>
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001c40:	d016      	beq.n	8001c70 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c50:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2211      	movs	r2, #17
 8001c56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ff94 	bl	8001b96 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c6e:	e060      	b.n	8001d32 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001c7e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c8e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2220      	movs	r2, #32
 8001c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b40      	cmp	r3, #64	@ 0x40
 8001ca8:	d107      	bne.n	8001cba <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ff8a 	bl	8001bcc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cb8:	e03b      	b.n	8001d32 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff ff67 	bl	8001b96 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cc8:	e033      	b.n	8001d32 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	2b21      	cmp	r3, #33	@ 0x21
 8001cce:	d005      	beq.n	8001cdc <I2C_MasterTransmit_TXE+0xda>
 8001cd0:	7bbb      	ldrb	r3, [r7, #14]
 8001cd2:	2b40      	cmp	r3, #64	@ 0x40
 8001cd4:	d12d      	bne.n	8001d32 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	2b22      	cmp	r3, #34	@ 0x22
 8001cda:	d12a      	bne.n	8001d32 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d108      	bne.n	8001cf8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cf4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001cf6:	e01c      	b.n	8001d32 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b40      	cmp	r3, #64	@ 0x40
 8001d02:	d103      	bne.n	8001d0c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f88e 	bl	8001e26 <I2C_MemoryTransmit_TXE_BTF>
}
 8001d0a:	e012      	b.n	8001d32 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001d30:	e7ff      	b.n	8001d32 <I2C_MasterTransmit_TXE+0x130>
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b084      	sub	sp, #16
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d46:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b21      	cmp	r3, #33	@ 0x21
 8001d52:	d164      	bne.n	8001e1e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d012      	beq.n	8001d84 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001d82:	e04c      	b.n	8001e1e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d01d      	beq.n	8001dc6 <I2C_MasterTransmit_BTF+0x8c>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	d01a      	beq.n	8001dc6 <I2C_MasterTransmit_BTF+0x8c>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d96:	d016      	beq.n	8001dc6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001da6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2211      	movs	r2, #17
 8001dac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2220      	movs	r2, #32
 8001dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff fee9 	bl	8001b96 <HAL_I2C_MasterTxCpltCallback>
}
 8001dc4:	e02b      	b.n	8001e1e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001dd4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001de4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2220      	movs	r2, #32
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b40      	cmp	r3, #64	@ 0x40
 8001dfe:	d107      	bne.n	8001e10 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff fedf 	bl	8001bcc <HAL_I2C_MemTxCpltCallback>
}
 8001e0e:	e006      	b.n	8001e1e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff febc 	bl	8001b96 <HAL_I2C_MasterTxCpltCallback>
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e34:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d11d      	bne.n	8001e7a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d10b      	bne.n	8001e5e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e56:	1c9a      	adds	r2, r3, #2
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001e5c:	e077      	b.n	8001f4e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	121b      	asrs	r3, r3, #8
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001e78:	e069      	b.n	8001f4e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d10b      	bne.n	8001e9a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e92:	1c5a      	adds	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001e98:	e059      	b.n	8001f4e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d152      	bne.n	8001f48 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	2b22      	cmp	r3, #34	@ 0x22
 8001ea6:	d10d      	bne.n	8001ec4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001eb6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001ec2:	e044      	b.n	8001f4e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d015      	beq.n	8001efa <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	2b21      	cmp	r3, #33	@ 0x21
 8001ed2:	d112      	bne.n	8001efa <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	781a      	ldrb	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001ef8:	e029      	b.n	8001f4e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d124      	bne.n	8001f4e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	2b21      	cmp	r3, #33	@ 0x21
 8001f08:	d121      	bne.n	8001f4e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001f18:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f28:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff fe43 	bl	8001bcc <HAL_I2C_MemTxCpltCallback>
}
 8001f46:	e002      	b.n	8001f4e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff fb6f 	bl	800162c <I2C_Flush_DR>
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b22      	cmp	r3, #34	@ 0x22
 8001f68:	f040 80b9 	bne.w	80020de <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f70:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d921      	bls.n	8001fc4 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	f040 8096 	bne.w	80020de <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fc0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8001fc2:	e08c      	b.n	80020de <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d07f      	beq.n	80020cc <I2C_MasterReceive_RXNE+0x176>
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d002      	beq.n	8001fd8 <I2C_MasterReceive_RXNE+0x82>
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d179      	bne.n	80020cc <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f001 f841 	bl	8003060 <I2C_WaitOnSTOPRequestThroughIT>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d14c      	bne.n	800207e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001ff2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002002:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002020:	b29b      	uxth	r3, r3
 8002022:	3b01      	subs	r3, #1
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b40      	cmp	r3, #64	@ 0x40
 800203c:	d10a      	bne.n	8002054 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff fdc6 	bl	8001bde <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002052:	e044      	b.n	80020de <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b08      	cmp	r3, #8
 8002060:	d002      	beq.n	8002068 <I2C_MasterReceive_RXNE+0x112>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b20      	cmp	r3, #32
 8002066:	d103      	bne.n	8002070 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	631a      	str	r2, [r3, #48]	@ 0x30
 800206e:	e002      	b.n	8002076 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2212      	movs	r2, #18
 8002074:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fd96 	bl	8001ba8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800207c:	e02f      	b.n	80020de <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800208c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7fe fa65 	bl	8000594 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020ca:	e008      	b.n	80020de <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020da:	605a      	str	r2, [r3, #4]
}
 80020dc:	e7ff      	b.n	80020de <I2C_MasterReceive_RXNE+0x188>
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d11b      	bne.n	8002136 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800210c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002134:	e0c4      	b.n	80022c0 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213a:	b29b      	uxth	r3, r3
 800213c:	2b03      	cmp	r3, #3
 800213e:	d129      	bne.n	8002194 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800214e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b04      	cmp	r3, #4
 8002154:	d00a      	beq.n	800216c <I2C_MasterReceive_BTF+0x86>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d007      	beq.n	800216c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800216a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691a      	ldr	r2, [r3, #16]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002192:	e095      	b.n	80022c0 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002198:	b29b      	uxth	r3, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d17d      	bne.n	800229a <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d002      	beq.n	80021aa <I2C_MasterReceive_BTF+0xc4>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d108      	bne.n	80021bc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	e016      	b.n	80021ea <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d002      	beq.n	80021c8 <I2C_MasterReceive_BTF+0xe2>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d108      	bne.n	80021da <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e007      	b.n	80021ea <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021e8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002244:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b40      	cmp	r3, #64	@ 0x40
 8002258:	d10a      	bne.n	8002270 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff fcb8 	bl	8001bde <HAL_I2C_MemRxCpltCallback>
}
 800226e:	e027      	b.n	80022c0 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b08      	cmp	r3, #8
 800227c:	d002      	beq.n	8002284 <I2C_MasterReceive_BTF+0x19e>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2b20      	cmp	r3, #32
 8002282:	d103      	bne.n	800228c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	631a      	str	r2, [r3, #48]	@ 0x30
 800228a:	e002      	b.n	8002292 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2212      	movs	r2, #18
 8002290:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff fc88 	bl	8001ba8 <HAL_I2C_MasterRxCpltCallback>
}
 8002298:	e012      	b.n	80022c0 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	3b01      	subs	r3, #1
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b40      	cmp	r3, #64	@ 0x40
 80022da:	d117      	bne.n	800230c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022f4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80022f6:	e067      	b.n	80023c8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	b2da      	uxtb	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	611a      	str	r2, [r3, #16]
}
 800230a:	e05d      	b.n	80023c8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002314:	d133      	bne.n	800237e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b21      	cmp	r3, #33	@ 0x21
 8002320:	d109      	bne.n	8002336 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002332:	611a      	str	r2, [r3, #16]
 8002334:	e008      	b.n	8002348 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	b2da      	uxtb	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <I2C_Master_SB+0x92>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002356:	2b00      	cmp	r3, #0
 8002358:	d108      	bne.n	800236c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235e:	2b00      	cmp	r3, #0
 8002360:	d032      	beq.n	80023c8 <I2C_Master_SB+0x100>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002368:	2b00      	cmp	r3, #0
 800236a:	d02d      	beq.n	80023c8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800237a:	605a      	str	r2, [r3, #4]
}
 800237c:	e024      	b.n	80023c8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10e      	bne.n	80023a4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238a:	b29b      	uxth	r3, r3
 800238c:	11db      	asrs	r3, r3, #7
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f003 0306 	and.w	r3, r3, #6
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f063 030f 	orn	r3, r3, #15
 800239a:	b2da      	uxtb	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	611a      	str	r2, [r3, #16]
}
 80023a2:	e011      	b.n	80023c8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d10d      	bne.n	80023c8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	11db      	asrs	r3, r3, #7
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f003 0306 	and.w	r3, r3, #6
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	f063 030e 	orn	r3, r3, #14
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	611a      	str	r2, [r3, #16]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <I2C_Master_ADD10+0x26>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d108      	bne.n	800240a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00c      	beq.n	800241a <I2C_Master_ADD10+0x48>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002406:	2b00      	cmp	r3, #0
 8002408:	d007      	beq.n	800241a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002418:	605a      	str	r2, [r3, #4]
  }
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr

08002424 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002424:	b480      	push	{r7}
 8002426:	b091      	sub	sp, #68	@ 0x44
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002432:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002440:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b22      	cmp	r3, #34	@ 0x22
 800244c:	f040 8174 	bne.w	8002738 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10f      	bne.n	8002478 <I2C_Master_ADDR+0x54>
 8002458:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800245c:	2b40      	cmp	r3, #64	@ 0x40
 800245e:	d10b      	bne.n	8002478 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002460:	2300      	movs	r3, #0
 8002462:	633b      	str	r3, [r7, #48]	@ 0x30
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	633b      	str	r3, [r7, #48]	@ 0x30
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	633b      	str	r3, [r7, #48]	@ 0x30
 8002474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002476:	e16b      	b.n	8002750 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800247c:	2b00      	cmp	r3, #0
 800247e:	d11d      	bne.n	80024bc <I2C_Master_ADDR+0x98>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002488:	d118      	bne.n	80024bc <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248a:	2300      	movs	r3, #0
 800248c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800249e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024ae:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80024ba:	e149      	b.n	8002750 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d113      	bne.n	80024ee <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024da:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	e120      	b.n	8002730 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	f040 808a 	bne.w	800260e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80024fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002500:	d137      	bne.n	8002572 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002510:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800251c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002520:	d113      	bne.n	800254a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002530:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002532:	2300      	movs	r3, #0
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	627b      	str	r3, [r7, #36]	@ 0x24
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	e0f2      	b.n	8002730 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	623b      	str	r3, [r7, #32]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	623b      	str	r3, [r7, #32]
 800255e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	e0de      	b.n	8002730 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002574:	2b08      	cmp	r3, #8
 8002576:	d02e      	beq.n	80025d6 <I2C_Master_ADDR+0x1b2>
 8002578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257a:	2b20      	cmp	r3, #32
 800257c:	d02b      	beq.n	80025d6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800257e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002580:	2b12      	cmp	r3, #18
 8002582:	d102      	bne.n	800258a <I2C_Master_ADDR+0x166>
 8002584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002586:	2b01      	cmp	r3, #1
 8002588:	d125      	bne.n	80025d6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800258a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800258c:	2b04      	cmp	r3, #4
 800258e:	d00e      	beq.n	80025ae <I2C_Master_ADDR+0x18a>
 8002590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002592:	2b02      	cmp	r3, #2
 8002594:	d00b      	beq.n	80025ae <I2C_Master_ADDR+0x18a>
 8002596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002598:	2b10      	cmp	r3, #16
 800259a:	d008      	beq.n	80025ae <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e007      	b.n	80025be <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	61fb      	str	r3, [r7, #28]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	e0ac      	b.n	8002730 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025e4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025e6:	2300      	movs	r3, #0
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e090      	b.n	8002730 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d158      	bne.n	80026ca <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261a:	2b04      	cmp	r3, #4
 800261c:	d021      	beq.n	8002662 <I2C_Master_ADDR+0x23e>
 800261e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002620:	2b02      	cmp	r3, #2
 8002622:	d01e      	beq.n	8002662 <I2C_Master_ADDR+0x23e>
 8002624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002626:	2b10      	cmp	r3, #16
 8002628:	d01b      	beq.n	8002662 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002638:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263a:	2300      	movs	r3, #0
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e012      	b.n	8002688 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002670:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002692:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002696:	d14b      	bne.n	8002730 <I2C_Master_ADDR+0x30c>
 8002698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800269a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800269e:	d00b      	beq.n	80026b8 <I2C_Master_ADDR+0x294>
 80026a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d008      	beq.n	80026b8 <I2C_Master_ADDR+0x294>
 80026a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d005      	beq.n	80026b8 <I2C_Master_ADDR+0x294>
 80026ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d002      	beq.n	80026b8 <I2C_Master_ADDR+0x294>
 80026b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	d13b      	bne.n	8002730 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	e032      	b.n	8002730 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026d8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026e8:	d117      	bne.n	800271a <I2C_Master_ADDR+0x2f6>
 80026ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026f0:	d00b      	beq.n	800270a <I2C_Master_ADDR+0x2e6>
 80026f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d008      	beq.n	800270a <I2C_Master_ADDR+0x2e6>
 80026f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d005      	beq.n	800270a <I2C_Master_ADDR+0x2e6>
 80026fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002700:	2b10      	cmp	r3, #16
 8002702:	d002      	beq.n	800270a <I2C_Master_ADDR+0x2e6>
 8002704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002706:	2b20      	cmp	r3, #32
 8002708:	d107      	bne.n	800271a <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002718:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002736:	e00b      	b.n	8002750 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002738:	2300      	movs	r3, #0
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
}
 800274e:	e7ff      	b.n	8002750 <I2C_Master_ADDR+0x32c>
 8002750:	bf00      	nop
 8002752:	3744      	adds	r7, #68	@ 0x44
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b084      	sub	sp, #16
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002768:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d02b      	beq.n	80027cc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	1c5a      	adds	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d114      	bne.n	80027cc <I2C_SlaveTransmit_TXE+0x72>
 80027a2:	7bfb      	ldrb	r3, [r7, #15]
 80027a4:	2b29      	cmp	r3, #41	@ 0x29
 80027a6:	d111      	bne.n	80027cc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027b6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2221      	movs	r2, #33	@ 0x21
 80027bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2228      	movs	r2, #40	@ 0x28
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff f9f7 	bl	8001bba <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d011      	beq.n	800280a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	781a      	ldrb	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	3b01      	subs	r3, #1
 8002804:	b29a      	uxth	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr

08002814 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002822:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d02c      	beq.n	8002888 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d114      	bne.n	8002888 <I2C_SlaveReceive_RXNE+0x74>
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b2a      	cmp	r3, #42	@ 0x2a
 8002862:	d111      	bne.n	8002888 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002872:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2222      	movs	r2, #34	@ 0x22
 8002878:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2228      	movs	r2, #40	@ 0x28
 800287e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fd fe64 	bl	8000550 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002888:	bf00      	nop
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d012      	beq.n	80028c8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80028ec:	2b28      	cmp	r3, #40	@ 0x28
 80028ee:	d125      	bne.n	800293c <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80028fe:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800290a:	2301      	movs	r3, #1
 800290c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002914:	2b00      	cmp	r3, #0
 8002916:	d103      	bne.n	8002920 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	81bb      	strh	r3, [r7, #12]
 800291e:	e002      	b.n	8002926 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800292e:	89ba      	ldrh	r2, [r7, #12]
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	4619      	mov	r1, r3
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7fd fde5 	bl	8000504 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800293a:	e00e      	b.n	800295a <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	60bb      	str	r3, [r7, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002972:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002982:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029b0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029c0:	d172      	bne.n	8002aa8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	2b22      	cmp	r3, #34	@ 0x22
 80029c6:	d002      	beq.n	80029ce <I2C_Slave_STOPF+0x6a>
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80029cc:	d135      	bne.n	8002a3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d005      	beq.n	80029f2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	f043 0204 	orr.w	r2, r3, #4
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fb0a 	bl	8001020 <HAL_DMA_GetState>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d049      	beq.n	8002aa6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a16:	4a69      	ldr	r2, [pc, #420]	@ (8002bbc <I2C_Slave_STOPF+0x258>)
 8002a18:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fa86 	bl	8000f30 <HAL_DMA_Abort_IT>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d03d      	beq.n	8002aa6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a34:	4610      	mov	r0, r2
 8002a36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a38:	e035      	b.n	8002aa6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	f043 0204 	orr.w	r2, r3, #4
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe fad4 	bl	8001020 <HAL_DMA_GetState>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d014      	beq.n	8002aa8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a82:	4a4e      	ldr	r2, [pc, #312]	@ (8002bbc <I2C_Slave_STOPF+0x258>)
 8002a84:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fa50 	bl	8000f30 <HAL_DMA_Abort_IT>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4798      	blx	r3
 8002aa4:	e000      	b.n	8002aa8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002aa6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d03e      	beq.n	8002b30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d112      	bne.n	8002ae6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af0:	2b40      	cmp	r3, #64	@ 0x40
 8002af2:	d112      	bne.n	8002b1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	f043 0204 	orr.w	r2, r3, #4
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f8b7 	bl	8002cac <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002b3e:	e039      	b.n	8002bb4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b44:	d109      	bne.n	8002b5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2228      	movs	r2, #40	@ 0x28
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7fd fcfb 	bl	8000550 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b28      	cmp	r3, #40	@ 0x28
 8002b64:	d111      	bne.n	8002b8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a15      	ldr	r2, [pc, #84]	@ (8002bc0 <I2C_Slave_STOPF+0x25c>)
 8002b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7fd fcb2 	bl	80004ec <HAL_I2C_ListenCpltCallback>
}
 8002b88:	e014      	b.n	8002bb4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	2b22      	cmp	r3, #34	@ 0x22
 8002b90:	d002      	beq.n	8002b98 <I2C_Slave_STOPF+0x234>
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
 8002b94:	2b22      	cmp	r3, #34	@ 0x22
 8002b96:	d10d      	bne.n	8002bb4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fd fcce 	bl	8000550 <HAL_I2C_SlaveRxCpltCallback>
}
 8002bb4:	bf00      	nop
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	08002f11 	.word	0x08002f11
 8002bc0:	ffff0000 	.word	0xffff0000

08002bc4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d002      	beq.n	8002be6 <I2C_Slave_AF+0x22>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b20      	cmp	r3, #32
 8002be4:	d129      	bne.n	8002c3a <I2C_Slave_AF+0x76>
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	2b28      	cmp	r3, #40	@ 0x28
 8002bea:	d126      	bne.n	8002c3a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a2e      	ldr	r2, [pc, #184]	@ (8002ca8 <I2C_Slave_AF+0xe4>)
 8002bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685a      	ldr	r2, [r3, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c00:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c0a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c1a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7fd fc5a 	bl	80004ec <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002c38:	e031      	b.n	8002c9e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	2b21      	cmp	r3, #33	@ 0x21
 8002c3e:	d129      	bne.n	8002c94 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a19      	ldr	r2, [pc, #100]	@ (8002ca8 <I2C_Slave_AF+0xe4>)
 8002c44:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2221      	movs	r2, #33	@ 0x21
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002c6a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c74:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c84:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7fe fcd0 	bl	800162c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7fe ff94 	bl	8001bba <HAL_I2C_SlaveTxCpltCallback>
}
 8002c92:	e004      	b.n	8002c9e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c9c:	615a      	str	r2, [r3, #20]
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	ffff0000 	.word	0xffff0000

08002cac <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cba:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cc2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002cc4:	7bbb      	ldrb	r3, [r7, #14]
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d002      	beq.n	8002cd0 <I2C_ITError+0x24>
 8002cca:	7bbb      	ldrb	r3, [r7, #14]
 8002ccc:	2b40      	cmp	r3, #64	@ 0x40
 8002cce:	d10a      	bne.n	8002ce6 <I2C_ITError+0x3a>
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b22      	cmp	r3, #34	@ 0x22
 8002cd4:	d107      	bne.n	8002ce6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ce6:	7bfb      	ldrb	r3, [r7, #15]
 8002ce8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002cec:	2b28      	cmp	r3, #40	@ 0x28
 8002cee:	d107      	bne.n	8002d00 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2228      	movs	r2, #40	@ 0x28
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002cfe:	e015      	b.n	8002d2c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d0e:	d00a      	beq.n	8002d26 <I2C_ITError+0x7a>
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	2b60      	cmp	r3, #96	@ 0x60
 8002d14:	d007      	beq.n	8002d26 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d3a:	d162      	bne.n	8002e02 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d4a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d50:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d020      	beq.n	8002d9c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5e:	4a6a      	ldr	r2, [pc, #424]	@ (8002f08 <I2C_ITError+0x25c>)
 8002d60:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe f8e2 	bl	8000f30 <HAL_DMA_Abort_IT>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f000 8089 	beq.w	8002e86 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d96:	4610      	mov	r0, r2
 8002d98:	4798      	blx	r3
 8002d9a:	e074      	b.n	8002e86 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da0:	4a59      	ldr	r2, [pc, #356]	@ (8002f08 <I2C_ITError+0x25c>)
 8002da2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe f8c1 	bl	8000f30 <HAL_DMA_Abort_IT>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d068      	beq.n	8002e86 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dbe:	2b40      	cmp	r3, #64	@ 0x40
 8002dc0:	d10b      	bne.n	8002dda <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4798      	blx	r3
 8002e00:	e041      	b.n	8002e86 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b60      	cmp	r3, #96	@ 0x60
 8002e0c:	d125      	bne.n	8002e5a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e26:	2b40      	cmp	r3, #64	@ 0x40
 8002e28:	d10b      	bne.n	8002e42 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0201 	bic.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fe fecc 	bl	8001bf0 <HAL_I2C_AbortCpltCallback>
 8002e58:	e015      	b.n	8002e86 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e64:	2b40      	cmp	r3, #64	@ 0x40
 8002e66:	d10b      	bne.n	8002e80 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7fd fb87 	bl	8000594 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10e      	bne.n	8002eb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d109      	bne.n	8002eb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002ec2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eca:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d113      	bne.n	8002f00 <I2C_ITError+0x254>
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	2b28      	cmp	r3, #40	@ 0x28
 8002edc:	d110      	bne.n	8002f00 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8002f0c <I2C_ITError+0x260>)
 8002ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2220      	movs	r2, #32
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7fd faf6 	bl	80004ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f00:	bf00      	nop
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	08002f11 	.word	0x08002f11
 8002f0c:	ffff0000 	.word	0xffff0000

08002f10 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f28:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002f2a:	4b4b      	ldr	r3, [pc, #300]	@ (8003058 <I2C_DMAAbort+0x148>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	08db      	lsrs	r3, r3, #3
 8002f30:	4a4a      	ldr	r2, [pc, #296]	@ (800305c <I2C_DMAAbort+0x14c>)
 8002f32:	fba2 2303 	umull	r2, r3, r2, r3
 8002f36:	0a1a      	lsrs	r2, r3, #8
 8002f38:	4613      	mov	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	00da      	lsls	r2, r3, #3
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d106      	bne.n	8002f58 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8002f56:	e00a      	b.n	8002f6e <I2C_DMAAbort+0x5e>
    }
    count--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f6c:	d0ea      	beq.n	8002f44 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f9c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b60      	cmp	r3, #96	@ 0x60
 8002fde:	d10e      	bne.n	8002ffe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ff6:	6978      	ldr	r0, [r7, #20]
 8002ff8:	f7fe fdfa 	bl	8001bf0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ffc:	e027      	b.n	800304e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003004:	2b28      	cmp	r3, #40	@ 0x28
 8003006:	d117      	bne.n	8003038 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f042 0201 	orr.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003026:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2200      	movs	r2, #0
 800302c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2228      	movs	r2, #40	@ 0x28
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003036:	e007      	b.n	8003048 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003048:	6978      	ldr	r0, [r7, #20]
 800304a:	f7fd faa3 	bl	8000594 <HAL_I2C_ErrorCallback>
}
 800304e:	bf00      	nop
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000000 	.word	0x20000000
 800305c:	14f8b589 	.word	0x14f8b589

08003060 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800306c:	4b13      	ldr	r3, [pc, #76]	@ (80030bc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	08db      	lsrs	r3, r3, #3
 8003072:	4a13      	ldr	r2, [pc, #76]	@ (80030c0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	0a1a      	lsrs	r2, r3, #8
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3b01      	subs	r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d107      	bne.n	800309e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f043 0220 	orr.w	r2, r3, #32
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e008      	b.n	80030b0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ac:	d0e9      	beq.n	8003082 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000000 	.word	0x20000000
 80030c0:	14f8b589 	.word	0x14f8b589

080030c4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80030d4:	d103      	bne.n	80030de <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80030dc:	e007      	b.n	80030ee <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80030e6:	d102      	bne.n	80030ee <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2208      	movs	r2, #8
 80030ec:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e272      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 8087 	beq.w	8003226 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003118:	4b92      	ldr	r3, [pc, #584]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b04      	cmp	r3, #4
 8003122:	d00c      	beq.n	800313e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003124:	4b8f      	ldr	r3, [pc, #572]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b08      	cmp	r3, #8
 800312e:	d112      	bne.n	8003156 <HAL_RCC_OscConfig+0x5e>
 8003130:	4b8c      	ldr	r3, [pc, #560]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800313c:	d10b      	bne.n	8003156 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313e:	4b89      	ldr	r3, [pc, #548]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d06c      	beq.n	8003224 <HAL_RCC_OscConfig+0x12c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d168      	bne.n	8003224 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e24c      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x76>
 8003160:	4b80      	ldr	r3, [pc, #512]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a7f      	ldr	r2, [pc, #508]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e02e      	b.n	80031cc <HAL_RCC_OscConfig+0xd4>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10c      	bne.n	8003190 <HAL_RCC_OscConfig+0x98>
 8003176:	4b7b      	ldr	r3, [pc, #492]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a7a      	ldr	r2, [pc, #488]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 800317c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	4b78      	ldr	r3, [pc, #480]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a77      	ldr	r2, [pc, #476]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003188:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e01d      	b.n	80031cc <HAL_RCC_OscConfig+0xd4>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0xbc>
 800319a:	4b72      	ldr	r3, [pc, #456]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a71      	ldr	r2, [pc, #452]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a6e      	ldr	r2, [pc, #440]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0xd4>
 80031b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b68      	ldr	r3, [pc, #416]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a67      	ldr	r2, [pc, #412]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d4:	f7fd fd94 	bl	8000d00 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031dc:	f7fd fd90 	bl	8000d00 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	@ 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e200      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0xe4>
 80031fa:	e014      	b.n	8003226 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fc:	f7fd fd80 	bl	8000d00 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7fd fd7c 	bl	8000d00 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	@ 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e1ec      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	4b53      	ldr	r3, [pc, #332]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x10c>
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d063      	beq.n	80032fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003232:	4b4c      	ldr	r3, [pc, #304]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800323e:	4b49      	ldr	r3, [pc, #292]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f003 030c 	and.w	r3, r3, #12
 8003246:	2b08      	cmp	r3, #8
 8003248:	d11c      	bne.n	8003284 <HAL_RCC_OscConfig+0x18c>
 800324a:	4b46      	ldr	r3, [pc, #280]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d116      	bne.n	8003284 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003256:	4b43      	ldr	r3, [pc, #268]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d005      	beq.n	800326e <HAL_RCC_OscConfig+0x176>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d001      	beq.n	800326e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e1c0      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326e:	4b3d      	ldr	r3, [pc, #244]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4939      	ldr	r1, [pc, #228]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003282:	e03a      	b.n	80032fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800328c:	4b36      	ldr	r3, [pc, #216]	@ (8003368 <HAL_RCC_OscConfig+0x270>)
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fd fd35 	bl	8000d00 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800329a:	f7fd fd31 	bl	8000d00 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e1a1      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4927      	ldr	r1, [pc, #156]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	600b      	str	r3, [r1, #0]
 80032cc:	e015      	b.n	80032fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ce:	4b26      	ldr	r3, [pc, #152]	@ (8003368 <HAL_RCC_OscConfig+0x270>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d4:	f7fd fd14 	bl	8000d00 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032dc:	f7fd fd10 	bl	8000d00 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e180      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d03a      	beq.n	800337c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d019      	beq.n	8003342 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330e:	4b17      	ldr	r3, [pc, #92]	@ (800336c <HAL_RCC_OscConfig+0x274>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003314:	f7fd fcf4 	bl	8000d00 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800331c:	f7fd fcf0 	bl	8000d00 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e160      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	4b0d      	ldr	r3, [pc, #52]	@ (8003364 <HAL_RCC_OscConfig+0x26c>)
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800333a:	2001      	movs	r0, #1
 800333c:	f000 faba 	bl	80038b4 <RCC_Delay>
 8003340:	e01c      	b.n	800337c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003342:	4b0a      	ldr	r3, [pc, #40]	@ (800336c <HAL_RCC_OscConfig+0x274>)
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003348:	f7fd fcda 	bl	8000d00 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800334e:	e00f      	b.n	8003370 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003350:	f7fd fcd6 	bl	8000d00 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d908      	bls.n	8003370 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e146      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
 8003362:	bf00      	nop
 8003364:	40021000 	.word	0x40021000
 8003368:	42420000 	.word	0x42420000
 800336c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003370:	4b92      	ldr	r3, [pc, #584]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1e9      	bne.n	8003350 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80a6 	beq.w	80034d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800338e:	4b8b      	ldr	r3, [pc, #556]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10d      	bne.n	80033b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	4b88      	ldr	r3, [pc, #544]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4a87      	ldr	r2, [pc, #540]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a4:	61d3      	str	r3, [r2, #28]
 80033a6:	4b85      	ldr	r3, [pc, #532]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033b6:	4b82      	ldr	r3, [pc, #520]	@ (80035c0 <HAL_RCC_OscConfig+0x4c8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d118      	bne.n	80033f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c2:	4b7f      	ldr	r3, [pc, #508]	@ (80035c0 <HAL_RCC_OscConfig+0x4c8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a7e      	ldr	r2, [pc, #504]	@ (80035c0 <HAL_RCC_OscConfig+0x4c8>)
 80033c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ce:	f7fd fc97 	bl	8000d00 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d6:	f7fd fc93 	bl	8000d00 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b64      	cmp	r3, #100	@ 0x64
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e103      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	4b75      	ldr	r3, [pc, #468]	@ (80035c0 <HAL_RCC_OscConfig+0x4c8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d106      	bne.n	800340a <HAL_RCC_OscConfig+0x312>
 80033fc:	4b6f      	ldr	r3, [pc, #444]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4a6e      	ldr	r2, [pc, #440]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	6213      	str	r3, [r2, #32]
 8003408:	e02d      	b.n	8003466 <HAL_RCC_OscConfig+0x36e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10c      	bne.n	800342c <HAL_RCC_OscConfig+0x334>
 8003412:	4b6a      	ldr	r3, [pc, #424]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	4a69      	ldr	r2, [pc, #420]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	6213      	str	r3, [r2, #32]
 800341e:	4b67      	ldr	r3, [pc, #412]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	4a66      	ldr	r2, [pc, #408]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003424:	f023 0304 	bic.w	r3, r3, #4
 8003428:	6213      	str	r3, [r2, #32]
 800342a:	e01c      	b.n	8003466 <HAL_RCC_OscConfig+0x36e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	2b05      	cmp	r3, #5
 8003432:	d10c      	bne.n	800344e <HAL_RCC_OscConfig+0x356>
 8003434:	4b61      	ldr	r3, [pc, #388]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	4a60      	ldr	r2, [pc, #384]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800343a:	f043 0304 	orr.w	r3, r3, #4
 800343e:	6213      	str	r3, [r2, #32]
 8003440:	4b5e      	ldr	r3, [pc, #376]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	4a5d      	ldr	r2, [pc, #372]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	6213      	str	r3, [r2, #32]
 800344c:	e00b      	b.n	8003466 <HAL_RCC_OscConfig+0x36e>
 800344e:	4b5b      	ldr	r3, [pc, #364]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	4a5a      	ldr	r2, [pc, #360]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	6213      	str	r3, [r2, #32]
 800345a:	4b58      	ldr	r3, [pc, #352]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	4a57      	ldr	r2, [pc, #348]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003460:	f023 0304 	bic.w	r3, r3, #4
 8003464:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d015      	beq.n	800349a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346e:	f7fd fc47 	bl	8000d00 <HAL_GetTick>
 8003472:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003474:	e00a      	b.n	800348c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003476:	f7fd fc43 	bl	8000d00 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003484:	4293      	cmp	r3, r2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e0b1      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348c:	4b4b      	ldr	r3, [pc, #300]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0ee      	beq.n	8003476 <HAL_RCC_OscConfig+0x37e>
 8003498:	e014      	b.n	80034c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349a:	f7fd fc31 	bl	8000d00 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fd fc2d 	bl	8000d00 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e09b      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b8:	4b40      	ldr	r3, [pc, #256]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1ee      	bne.n	80034a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d105      	bne.n	80034d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ca:	4b3c      	ldr	r3, [pc, #240]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	4a3b      	ldr	r2, [pc, #236]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69db      	ldr	r3, [r3, #28]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8087 	beq.w	80035ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034e0:	4b36      	ldr	r3, [pc, #216]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d061      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d146      	bne.n	8003582 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f4:	4b33      	ldr	r3, [pc, #204]	@ (80035c4 <HAL_RCC_OscConfig+0x4cc>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034fa:	f7fd fc01 	bl	8000d00 <HAL_GetTick>
 80034fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003500:	e008      	b.n	8003514 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003502:	f7fd fbfd 	bl	8000d00 <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	2b02      	cmp	r3, #2
 800350e:	d901      	bls.n	8003514 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e06d      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003514:	4b29      	ldr	r3, [pc, #164]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1f0      	bne.n	8003502 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003528:	d108      	bne.n	800353c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800352a:	4b24      	ldr	r3, [pc, #144]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	4921      	ldr	r1, [pc, #132]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800353c:	4b1f      	ldr	r3, [pc, #124]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a19      	ldr	r1, [r3, #32]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	430b      	orrs	r3, r1
 800354e:	491b      	ldr	r1, [pc, #108]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003550:	4313      	orrs	r3, r2
 8003552:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003554:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <HAL_RCC_OscConfig+0x4cc>)
 8003556:	2201      	movs	r2, #1
 8003558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355a:	f7fd fbd1 	bl	8000d00 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003562:	f7fd fbcd 	bl	8000d00 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e03d      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003574:	4b11      	ldr	r3, [pc, #68]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x46a>
 8003580:	e035      	b.n	80035ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003582:	4b10      	ldr	r3, [pc, #64]	@ (80035c4 <HAL_RCC_OscConfig+0x4cc>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003588:	f7fd fbba 	bl	8000d00 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003590:	f7fd fbb6 	bl	8000d00 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e026      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a2:	4b06      	ldr	r3, [pc, #24]	@ (80035bc <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x498>
 80035ae:	e01e      	b.n	80035ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e019      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
 80035bc:	40021000 	.word	0x40021000
 80035c0:	40007000 	.word	0x40007000
 80035c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035c8:	4b0b      	ldr	r3, [pc, #44]	@ (80035f8 <HAL_RCC_OscConfig+0x500>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d106      	bne.n	80035ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d001      	beq.n	80035ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40021000 	.word	0x40021000

080035fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0d0      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003610:	4b6a      	ldr	r3, [pc, #424]	@ (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d910      	bls.n	8003640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b67      	ldr	r3, [pc, #412]	@ (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 0207 	bic.w	r2, r3, #7
 8003626:	4965      	ldr	r1, [pc, #404]	@ (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362e:	4b63      	ldr	r3, [pc, #396]	@ (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	429a      	cmp	r2, r3
 800363a:	d001      	beq.n	8003640 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e0b8      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003658:	4b59      	ldr	r3, [pc, #356]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4a58      	ldr	r2, [pc, #352]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800365e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003662:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0308 	and.w	r3, r3, #8
 800366c:	2b00      	cmp	r3, #0
 800366e:	d005      	beq.n	800367c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003670:	4b53      	ldr	r3, [pc, #332]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4a52      	ldr	r2, [pc, #328]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003676:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800367a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800367c:	4b50      	ldr	r3, [pc, #320]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	494d      	ldr	r1, [pc, #308]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d040      	beq.n	800371c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d107      	bne.n	80036b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b47      	ldr	r3, [pc, #284]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d115      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e07f      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ba:	4b41      	ldr	r3, [pc, #260]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e073      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ca:	4b3d      	ldr	r3, [pc, #244]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e06b      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036da:	4b39      	ldr	r3, [pc, #228]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f023 0203 	bic.w	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4936      	ldr	r1, [pc, #216]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ec:	f7fd fb08 	bl	8000d00 <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f2:	e00a      	b.n	800370a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f4:	f7fd fb04 	bl	8000d00 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e053      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	4b2d      	ldr	r3, [pc, #180]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f003 020c 	and.w	r2, r3, #12
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	429a      	cmp	r2, r3
 800371a:	d1eb      	bne.n	80036f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800371c:	4b27      	ldr	r3, [pc, #156]	@ (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d210      	bcs.n	800374c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b24      	ldr	r3, [pc, #144]	@ (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f023 0207 	bic.w	r2, r3, #7
 8003732:	4922      	ldr	r1, [pc, #136]	@ (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800373a:	4b20      	ldr	r3, [pc, #128]	@ (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d001      	beq.n	800374c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e032      	b.n	80037b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d008      	beq.n	800376a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003758:	4b19      	ldr	r3, [pc, #100]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	4916      	ldr	r1, [pc, #88]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0308 	and.w	r3, r3, #8
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003776:	4b12      	ldr	r3, [pc, #72]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	490e      	ldr	r1, [pc, #56]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003786:	4313      	orrs	r3, r2
 8003788:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800378a:	f000 f821 	bl	80037d0 <HAL_RCC_GetSysClockFreq>
 800378e:	4602      	mov	r2, r0
 8003790:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	091b      	lsrs	r3, r3, #4
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	490a      	ldr	r1, [pc, #40]	@ (80037c4 <HAL_RCC_ClockConfig+0x1c8>)
 800379c:	5ccb      	ldrb	r3, [r1, r3]
 800379e:	fa22 f303 	lsr.w	r3, r2, r3
 80037a2:	4a09      	ldr	r2, [pc, #36]	@ (80037c8 <HAL_RCC_ClockConfig+0x1cc>)
 80037a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037a6:	4b09      	ldr	r3, [pc, #36]	@ (80037cc <HAL_RCC_ClockConfig+0x1d0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd fa66 	bl	8000c7c <HAL_InitTick>

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	40022000 	.word	0x40022000
 80037c0:	40021000 	.word	0x40021000
 80037c4:	08004524 	.word	0x08004524
 80037c8:	20000000 	.word	0x20000000
 80037cc:	20000004 	.word	0x20000004

080037d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	2300      	movs	r3, #0
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	2300      	movs	r3, #0
 80037e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x94>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 030c 	and.w	r3, r3, #12
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d002      	beq.n	8003800 <HAL_RCC_GetSysClockFreq+0x30>
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d003      	beq.n	8003806 <HAL_RCC_GetSysClockFreq+0x36>
 80037fe:	e027      	b.n	8003850 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003800:	4b19      	ldr	r3, [pc, #100]	@ (8003868 <HAL_RCC_GetSysClockFreq+0x98>)
 8003802:	613b      	str	r3, [r7, #16]
      break;
 8003804:	e027      	b.n	8003856 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	0c9b      	lsrs	r3, r3, #18
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	4a17      	ldr	r2, [pc, #92]	@ (800386c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003810:	5cd3      	ldrb	r3, [r2, r3]
 8003812:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d010      	beq.n	8003840 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800381e:	4b11      	ldr	r3, [pc, #68]	@ (8003864 <HAL_RCC_GetSysClockFreq+0x94>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	0c5b      	lsrs	r3, r3, #17
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	4a11      	ldr	r2, [pc, #68]	@ (8003870 <HAL_RCC_GetSysClockFreq+0xa0>)
 800382a:	5cd3      	ldrb	r3, [r2, r3]
 800382c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a0d      	ldr	r2, [pc, #52]	@ (8003868 <HAL_RCC_GetSysClockFreq+0x98>)
 8003832:	fb03 f202 	mul.w	r2, r3, r2
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	fbb2 f3f3 	udiv	r3, r2, r3
 800383c:	617b      	str	r3, [r7, #20]
 800383e:	e004      	b.n	800384a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a0c      	ldr	r2, [pc, #48]	@ (8003874 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003844:	fb02 f303 	mul.w	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	613b      	str	r3, [r7, #16]
      break;
 800384e:	e002      	b.n	8003856 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003850:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <HAL_RCC_GetSysClockFreq+0x98>)
 8003852:	613b      	str	r3, [r7, #16]
      break;
 8003854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003856:	693b      	ldr	r3, [r7, #16]
}
 8003858:	4618      	mov	r0, r3
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	007a1200 	.word	0x007a1200
 800386c:	0800453c 	.word	0x0800453c
 8003870:	0800454c 	.word	0x0800454c
 8003874:	003d0900 	.word	0x003d0900

08003878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800387c:	4b02      	ldr	r3, [pc, #8]	@ (8003888 <HAL_RCC_GetHCLKFreq+0x10>)
 800387e:	681b      	ldr	r3, [r3, #0]
}
 8003880:	4618      	mov	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	20000000 	.word	0x20000000

0800388c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003890:	f7ff fff2 	bl	8003878 <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	0a1b      	lsrs	r3, r3, #8
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4903      	ldr	r1, [pc, #12]	@ (80038b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	08004534 	.word	0x08004534

080038b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038bc:	4b0a      	ldr	r3, [pc, #40]	@ (80038e8 <RCC_Delay+0x34>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0a      	ldr	r2, [pc, #40]	@ (80038ec <RCC_Delay+0x38>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	0a5b      	lsrs	r3, r3, #9
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	fb02 f303 	mul.w	r3, r2, r3
 80038ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038d0:	bf00      	nop
  }
  while (Delay --);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1e5a      	subs	r2, r3, #1
 80038d6:	60fa      	str	r2, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f9      	bne.n	80038d0 <RCC_Delay+0x1c>
}
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr
 80038e8:	20000000 	.word	0x20000000
 80038ec:	10624dd3 	.word	0x10624dd3

080038f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e041      	b.n	8003986 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd f8c6 	bl	8000aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	4619      	mov	r1, r3
 800392e:	4610      	mov	r0, r2
 8003930:	f000 fab2 	bl	8003e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e041      	b.n	8003a24 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d106      	bne.n	80039ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f839 	bl	8003a2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3304      	adds	r3, #4
 80039ca:	4619      	mov	r1, r3
 80039cc:	4610      	mov	r0, r2
 80039ce:	f000 fa63 	bl	8003e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_TIM_PWM_Start+0x24>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	bf14      	ite	ne
 8003a5c:	2301      	movne	r3, #1
 8003a5e:	2300      	moveq	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e022      	b.n	8003aaa <HAL_TIM_PWM_Start+0x6a>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d109      	bne.n	8003a7e <HAL_TIM_PWM_Start+0x3e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	bf14      	ite	ne
 8003a76:	2301      	movne	r3, #1
 8003a78:	2300      	moveq	r3, #0
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	e015      	b.n	8003aaa <HAL_TIM_PWM_Start+0x6a>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d109      	bne.n	8003a98 <HAL_TIM_PWM_Start+0x58>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	e008      	b.n	8003aaa <HAL_TIM_PWM_Start+0x6a>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	bf14      	ite	ne
 8003aa4:	2301      	movne	r3, #1
 8003aa6:	2300      	moveq	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e05e      	b.n	8003b70 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d104      	bne.n	8003ac2 <HAL_TIM_PWM_Start+0x82>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2202      	movs	r2, #2
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ac0:	e013      	b.n	8003aea <HAL_TIM_PWM_Start+0xaa>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b04      	cmp	r3, #4
 8003ac6:	d104      	bne.n	8003ad2 <HAL_TIM_PWM_Start+0x92>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ad0:	e00b      	b.n	8003aea <HAL_TIM_PWM_Start+0xaa>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d104      	bne.n	8003ae2 <HAL_TIM_PWM_Start+0xa2>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ae0:	e003      	b.n	8003aea <HAL_TIM_PWM_Start+0xaa>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2201      	movs	r2, #1
 8003af0:	6839      	ldr	r1, [r7, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fc5c 	bl	80043b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1e      	ldr	r2, [pc, #120]	@ (8003b78 <HAL_TIM_PWM_Start+0x138>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d107      	bne.n	8003b12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a18      	ldr	r2, [pc, #96]	@ (8003b78 <HAL_TIM_PWM_Start+0x138>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d00e      	beq.n	8003b3a <HAL_TIM_PWM_Start+0xfa>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b24:	d009      	beq.n	8003b3a <HAL_TIM_PWM_Start+0xfa>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a14      	ldr	r2, [pc, #80]	@ (8003b7c <HAL_TIM_PWM_Start+0x13c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d004      	beq.n	8003b3a <HAL_TIM_PWM_Start+0xfa>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a12      	ldr	r2, [pc, #72]	@ (8003b80 <HAL_TIM_PWM_Start+0x140>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d111      	bne.n	8003b5e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2b06      	cmp	r3, #6
 8003b4a:	d010      	beq.n	8003b6e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5c:	e007      	b.n	8003b6e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0201 	orr.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800

08003b84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e0ae      	b.n	8003d00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	f200 809f 	bhi.w	8003cf0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003bed 	.word	0x08003bed
 8003bbc:	08003cf1 	.word	0x08003cf1
 8003bc0:	08003cf1 	.word	0x08003cf1
 8003bc4:	08003cf1 	.word	0x08003cf1
 8003bc8:	08003c2d 	.word	0x08003c2d
 8003bcc:	08003cf1 	.word	0x08003cf1
 8003bd0:	08003cf1 	.word	0x08003cf1
 8003bd4:	08003cf1 	.word	0x08003cf1
 8003bd8:	08003c6f 	.word	0x08003c6f
 8003bdc:	08003cf1 	.word	0x08003cf1
 8003be0:	08003cf1 	.word	0x08003cf1
 8003be4:	08003cf1 	.word	0x08003cf1
 8003be8:	08003caf 	.word	0x08003caf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 f9be 	bl	8003f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0208 	orr.w	r2, r2, #8
 8003c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0204 	bic.w	r2, r2, #4
 8003c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6999      	ldr	r1, [r3, #24]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	619a      	str	r2, [r3, #24]
      break;
 8003c2a:	e064      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fa04 	bl	8004040 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6999      	ldr	r1, [r3, #24]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	021a      	lsls	r2, r3, #8
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	619a      	str	r2, [r3, #24]
      break;
 8003c6c:	e043      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fa4d 	bl	8004114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0208 	orr.w	r2, r2, #8
 8003c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69da      	ldr	r2, [r3, #28]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0204 	bic.w	r2, r2, #4
 8003c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69d9      	ldr	r1, [r3, #28]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	61da      	str	r2, [r3, #28]
      break;
 8003cac:	e023      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fa97 	bl	80041e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69d9      	ldr	r1, [r3, #28]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	021a      	lsls	r2, r3, #8
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	61da      	str	r2, [r3, #28]
      break;
 8003cee:	e002      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_TIM_ConfigClockSource+0x1c>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e0b4      	b.n	8003e8e <HAL_TIM_ConfigClockSource+0x186>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5c:	d03e      	beq.n	8003ddc <HAL_TIM_ConfigClockSource+0xd4>
 8003d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d62:	f200 8087 	bhi.w	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d6a:	f000 8086 	beq.w	8003e7a <HAL_TIM_ConfigClockSource+0x172>
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d72:	d87f      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d74:	2b70      	cmp	r3, #112	@ 0x70
 8003d76:	d01a      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0xa6>
 8003d78:	2b70      	cmp	r3, #112	@ 0x70
 8003d7a:	d87b      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d7c:	2b60      	cmp	r3, #96	@ 0x60
 8003d7e:	d050      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x11a>
 8003d80:	2b60      	cmp	r3, #96	@ 0x60
 8003d82:	d877      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d84:	2b50      	cmp	r3, #80	@ 0x50
 8003d86:	d03c      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0xfa>
 8003d88:	2b50      	cmp	r3, #80	@ 0x50
 8003d8a:	d873      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d8c:	2b40      	cmp	r3, #64	@ 0x40
 8003d8e:	d058      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x13a>
 8003d90:	2b40      	cmp	r3, #64	@ 0x40
 8003d92:	d86f      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d94:	2b30      	cmp	r3, #48	@ 0x30
 8003d96:	d064      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x15a>
 8003d98:	2b30      	cmp	r3, #48	@ 0x30
 8003d9a:	d86b      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d060      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x15a>
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d867      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d05c      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x15a>
 8003da8:	2b10      	cmp	r3, #16
 8003daa:	d05a      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x15a>
 8003dac:	e062      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dbe:	f000 fad8 	bl	8004372 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	609a      	str	r2, [r3, #8]
      break;
 8003dda:	e04f      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dec:	f000 fac1 	bl	8004372 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dfe:	609a      	str	r2, [r3, #8]
      break;
 8003e00:	e03c      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f000 fa38 	bl	8004284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2150      	movs	r1, #80	@ 0x50
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fa8f 	bl	800433e <TIM_ITRx_SetConfig>
      break;
 8003e20:	e02c      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f000 fa56 	bl	80042e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2160      	movs	r1, #96	@ 0x60
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fa7f 	bl	800433e <TIM_ITRx_SetConfig>
      break;
 8003e40:	e01c      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f000 fa18 	bl	8004284 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2140      	movs	r1, #64	@ 0x40
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fa6f 	bl	800433e <TIM_ITRx_SetConfig>
      break;
 8003e60:	e00c      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f000 fa66 	bl	800433e <TIM_ITRx_SetConfig>
      break;
 8003e72:	e003      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
      break;
 8003e78:	e000      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a2f      	ldr	r2, [pc, #188]	@ (8003f68 <TIM_Base_SetConfig+0xd0>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00b      	beq.n	8003ec8 <TIM_Base_SetConfig+0x30>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb6:	d007      	beq.n	8003ec8 <TIM_Base_SetConfig+0x30>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a2c      	ldr	r2, [pc, #176]	@ (8003f6c <TIM_Base_SetConfig+0xd4>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_Base_SetConfig+0x30>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8003f70 <TIM_Base_SetConfig+0xd8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d108      	bne.n	8003eda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a22      	ldr	r2, [pc, #136]	@ (8003f68 <TIM_Base_SetConfig+0xd0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00b      	beq.n	8003efa <TIM_Base_SetConfig+0x62>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee8:	d007      	beq.n	8003efa <TIM_Base_SetConfig+0x62>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a1f      	ldr	r2, [pc, #124]	@ (8003f6c <TIM_Base_SetConfig+0xd4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d003      	beq.n	8003efa <TIM_Base_SetConfig+0x62>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8003f70 <TIM_Base_SetConfig+0xd8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d108      	bne.n	8003f0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a0d      	ldr	r2, [pc, #52]	@ (8003f68 <TIM_Base_SetConfig+0xd0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d103      	bne.n	8003f40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f023 0201 	bic.w	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	611a      	str	r2, [r3, #16]
  }
}
 8003f5e:	bf00      	nop
 8003f60:	3714      	adds	r7, #20
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr
 8003f68:	40012c00 	.word	0x40012c00
 8003f6c:	40000400 	.word	0x40000400
 8003f70:	40000800 	.word	0x40000800

08003f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b087      	sub	sp, #28
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f023 0201 	bic.w	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0303 	bic.w	r3, r3, #3
 8003faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f023 0302 	bic.w	r3, r3, #2
 8003fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a1c      	ldr	r2, [pc, #112]	@ (800403c <TIM_OC1_SetConfig+0xc8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d10c      	bne.n	8003fea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f023 0308 	bic.w	r3, r3, #8
 8003fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f023 0304 	bic.w	r3, r3, #4
 8003fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a13      	ldr	r2, [pc, #76]	@ (800403c <TIM_OC1_SetConfig+0xc8>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d111      	bne.n	8004016 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	699b      	ldr	r3, [r3, #24]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	621a      	str	r2, [r3, #32]
}
 8004030:	bf00      	nop
 8004032:	371c      	adds	r7, #28
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40012c00 	.word	0x40012c00

08004040 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f023 0210 	bic.w	r2, r3, #16
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800406e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	021b      	lsls	r3, r3, #8
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 0320 	bic.w	r3, r3, #32
 800408a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a1d      	ldr	r2, [pc, #116]	@ (8004110 <TIM_OC2_SetConfig+0xd0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d10d      	bne.n	80040bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a14      	ldr	r2, [pc, #80]	@ (8004110 <TIM_OC2_SetConfig+0xd0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d113      	bne.n	80040ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80040ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80040d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	40012c00 	.word	0x40012c00

08004114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0303 	bic.w	r3, r3, #3
 800414a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68fa      	ldr	r2, [r7, #12]
 8004152:	4313      	orrs	r3, r2
 8004154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800415c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a1d      	ldr	r2, [pc, #116]	@ (80041e4 <TIM_OC3_SetConfig+0xd0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d10d      	bne.n	800418e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	021b      	lsls	r3, r3, #8
 8004180:	697a      	ldr	r2, [r7, #20]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800418c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a14      	ldr	r2, [pc, #80]	@ (80041e4 <TIM_OC3_SetConfig+0xd0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d113      	bne.n	80041be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800419c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80041a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	621a      	str	r2, [r3, #32]
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40012c00 	.word	0x40012c00

080041e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800421e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	031b      	lsls	r3, r3, #12
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a0f      	ldr	r2, [pc, #60]	@ (8004280 <TIM_OC4_SetConfig+0x98>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d109      	bne.n	800425c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800424e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	019b      	lsls	r3, r3, #6
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	621a      	str	r2, [r3, #32]
}
 8004276:	bf00      	nop
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	40012c00 	.word	0x40012c00

08004284 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f023 0201 	bic.w	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f023 030a 	bic.w	r3, r3, #10
 80042c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	621a      	str	r2, [r3, #32]
}
 80042d6:	bf00      	nop
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f023 0210 	bic.w	r2, r3, #16
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800430a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	031b      	lsls	r3, r3, #12
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	4313      	orrs	r3, r2
 8004314:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800431c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	621a      	str	r2, [r3, #32]
}
 8004334:	bf00      	nop
 8004336:	371c      	adds	r7, #28
 8004338:	46bd      	mov	sp, r7
 800433a:	bc80      	pop	{r7}
 800433c:	4770      	bx	lr

0800433e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800433e:	b480      	push	{r7}
 8004340:	b085      	sub	sp, #20
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004354:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	f043 0307 	orr.w	r3, r3, #7
 8004360:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	609a      	str	r2, [r3, #8]
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	bc80      	pop	{r7}
 8004370:	4770      	bx	lr

08004372 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004372:	b480      	push	{r7}
 8004374:	b087      	sub	sp, #28
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800438c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	021a      	lsls	r2, r3, #8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	431a      	orrs	r2, r3
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	4313      	orrs	r3, r2
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	4313      	orrs	r3, r2
 800439e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	609a      	str	r2, [r3, #8]
}
 80043a6:	bf00      	nop
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bc80      	pop	{r7}
 80043ae:	4770      	bx	lr

080043b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f003 031f 	and.w	r3, r3, #31
 80043c2:	2201      	movs	r2, #1
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1a      	ldr	r2, [r3, #32]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	43db      	mvns	r3, r3
 80043d2:	401a      	ands	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6a1a      	ldr	r2, [r3, #32]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f003 031f 	and.w	r3, r3, #31
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	fa01 f303 	lsl.w	r3, r1, r3
 80043e8:	431a      	orrs	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bc80      	pop	{r7}
 80043f6:	4770      	bx	lr

080043f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800440c:	2302      	movs	r3, #2
 800440e:	e046      	b.n	800449e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004436:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a16      	ldr	r2, [pc, #88]	@ (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d00e      	beq.n	8004472 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800445c:	d009      	beq.n	8004472 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a12      	ldr	r2, [pc, #72]	@ (80044ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d004      	beq.n	8004472 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a10      	ldr	r2, [pc, #64]	@ (80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d10c      	bne.n	800448c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	4313      	orrs	r3, r2
 8004482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40000400 	.word	0x40000400
 80044b0:	40000800 	.word	0x40000800

080044b4 <memset>:
 80044b4:	4603      	mov	r3, r0
 80044b6:	4402      	add	r2, r0
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d100      	bne.n	80044be <memset+0xa>
 80044bc:	4770      	bx	lr
 80044be:	f803 1b01 	strb.w	r1, [r3], #1
 80044c2:	e7f9      	b.n	80044b8 <memset+0x4>

080044c4 <__libc_init_array>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	2600      	movs	r6, #0
 80044c8:	4d0c      	ldr	r5, [pc, #48]	@ (80044fc <__libc_init_array+0x38>)
 80044ca:	4c0d      	ldr	r4, [pc, #52]	@ (8004500 <__libc_init_array+0x3c>)
 80044cc:	1b64      	subs	r4, r4, r5
 80044ce:	10a4      	asrs	r4, r4, #2
 80044d0:	42a6      	cmp	r6, r4
 80044d2:	d109      	bne.n	80044e8 <__libc_init_array+0x24>
 80044d4:	f000 f81a 	bl	800450c <_init>
 80044d8:	2600      	movs	r6, #0
 80044da:	4d0a      	ldr	r5, [pc, #40]	@ (8004504 <__libc_init_array+0x40>)
 80044dc:	4c0a      	ldr	r4, [pc, #40]	@ (8004508 <__libc_init_array+0x44>)
 80044de:	1b64      	subs	r4, r4, r5
 80044e0:	10a4      	asrs	r4, r4, #2
 80044e2:	42a6      	cmp	r6, r4
 80044e4:	d105      	bne.n	80044f2 <__libc_init_array+0x2e>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ec:	4798      	blx	r3
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7ee      	b.n	80044d0 <__libc_init_array+0xc>
 80044f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f6:	4798      	blx	r3
 80044f8:	3601      	adds	r6, #1
 80044fa:	e7f2      	b.n	80044e2 <__libc_init_array+0x1e>
 80044fc:	08004550 	.word	0x08004550
 8004500:	08004550 	.word	0x08004550
 8004504:	08004550 	.word	0x08004550
 8004508:	08004554 	.word	0x08004554

0800450c <_init>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	bf00      	nop
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr

08004518 <_fini>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	bf00      	nop
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr
